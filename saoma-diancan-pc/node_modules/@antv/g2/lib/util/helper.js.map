{"version":3,"file":"helper.js","sourceRoot":"","sources":["../../src/util/helper.ts"],"names":[],"mappings":";;;AAAA,mCAA+C;AAE/C;;;;;;;GAOG;AACH,SAAgB,SAAS,CAAC,KAAa,EAAE,KAAa,EAAE,GAAW;IACjE,IAAM,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;IACjC,IAAM,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;IAEjC,OAAO,KAAK,IAAI,GAAG,IAAI,KAAK,IAAI,GAAG,CAAC;AACtC,CAAC;AALD,8BAKC;AAED;;;;;;;;;GASG;AACH,SAAgB,MAAM,CAAC,MAAsB,EAAE,YAAoB,EAAE,QAAa;IAChF,IAAI,eAAQ,CAAC,MAAM,CAAC,EAAE;QACpB,OAAO,MAAM,CAAC,MAAM,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC;KAC9C;SAAM,IAAI,cAAO,CAAC,MAAM,CAAC,EAAE;QAC1B,IAAM,YAAY,GAAG,MAAM,CAAC,MAAM,CAAC;QACnC,IAAI,YAAY,GAAG,YAAY,EAAE;YAC/B,IAAM,IAAI,GAAG,YAAY,GAAG,YAAY,CAAC;YACzC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,EAAE,CAAC,EAAE,EAAE;gBAC7B,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;aACvB;SACF;KACF;IAED,OAAO,MAAM,CAAC;AAChB,CAAC;AAdD,wBAcC;AAED;;;;;GAKG;AACH,SAAgB,IAAI,CAAU,GAAM,EAAE,IAAc;IAClD,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE;QAC3B,IAAI,CAAC,OAAO,CAAC,UAAC,GAAW;YACvB,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC;QAClB,CAAC,CAAC,CAAC;KACJ;IAED,OAAO,GAAG,CAAC;AACb,CAAC;AARD,oBAQC;AAED;;;;;GAKG;AACH,SAAgB,IAAI,CAAC,WAAkB,EAAE,WAAuB,EAAE,GAAgB;IAAzC,4BAAA,EAAA,gBAAuB;IAAE,oBAAA,EAAA,QAAgB;IAChF,KAAqB,UAAW,EAAX,2BAAW,EAAX,yBAAW,EAAX,IAAW,EAAE;QAA7B,IAAM,MAAM,oBAAA;QACf,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE;YAChB,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACzB,GAAG,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC;SACpB;KACF;IACD,OAAO,WAAW,CAAC;AACrB,CAAC;AARD,oBAQC","sourcesContent":["import { isArray, isString } from '@antv/util';\n\n/**\n * @ignore\n * Determines whether between is\n * @param value\n * @param start\n * @param end\n * @returns true if between\n */\nexport function isBetween(value: number, start: number, end: number): boolean {\n  const min = Math.min(start, end);\n  const max = Math.max(start, end);\n\n  return value >= min && value <= max;\n}\n\n/**\n * @ignore\n * pads the current string/array with a given value (repeated, if needed) so that the resulting reaches a given length.\n * The padding is applied from the end of the current value.\n *\n * @param source\n * @param targetLength\n * @param padValue\n * @returns\n */\nexport function padEnd(source: string | any[], targetLength: number, padValue: any) {\n  if (isString(source)) {\n    return source.padEnd(targetLength, padValue);\n  } else if (isArray(source)) {\n    const sourceLength = source.length;\n    if (sourceLength < targetLength) {\n      const diff = targetLength - sourceLength;\n      for (let i = 0; i < diff; i++) {\n        source.push(padValue);\n      }\n    }\n  }\n\n  return source;\n}\n\n/**\n * @ignore\n * omit keys of an object.\n * @param obj\n * @param keys\n */\nexport function omit<T = any>(obj: T, keys: string[]): T {\n  if (typeof obj === 'object') {\n    keys.forEach((key: string) => {\n      delete obj[key];\n    });\n  }\n\n  return obj;\n}\n\n/**\n * @ignore\n * @param sourceArray\n * @param targetArray\n * @param map\n */\nexport function uniq(sourceArray: any[], targetArray: any[] = [], map: object = {}) {\n  for (const source of sourceArray) {\n    if (!map[source]) {\n      targetArray.push(source);\n      map[source] = true;\n    }\n  }\n  return targetArray;\n}\n"]}