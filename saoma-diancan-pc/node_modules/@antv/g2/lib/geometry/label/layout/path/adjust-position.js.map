{"version":3,"file":"adjust-position.js","sourceRoot":"","sources":["../../../../../src/geometry/label/layout/path/adjust-position.ts"],"names":[],"mappings":"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","sourcesContent":["import { groupBy, keys, map } from '@antv/util';\nimport { IElement, IGroup, IShape, BBox } from '../../../../dependents';\nimport { isIntersect } from '../../../../util/collision-detect';\nimport Geometry from '../../../base';\nimport Element from '../../../element';\nimport { LabelItem } from '../../interface';\nimport { findLabelTextShape } from '../../util';\n\n/**\n * point-adjust-position layout 的配置类型\n */\nexport interface PointAdjustPositionLayoutCfg {\n  offset?: number;\n}\n\n/**\n * 对同一组(相同 xField )的 Label 进行排序：第一个、最后一个、其他...\n * @param geometry\n * @param labels\n */\nfunction sortLabels(geometry: Geometry, labels: IGroup[]) {\n  const yField = geometry.getXYFields()[1];\n  const result: IGroup[] = [];\n  const sortedLabels = labels.sort((left, right) => left.get('data')[yField] - left.get('data')[yField]);\n\n  if (sortedLabels.length > 0) {\n    result.push(sortedLabels.shift());\n  }\n  if (sortedLabels.length > 0) {\n    result.push(sortedLabels.pop());\n  }\n  result.push(...sortedLabels);\n\n  return result;\n}\n\nfunction hasSome(dones: IGroup[], current: IGroup, compare: (left: IGroup, right: IGroup) => boolean): boolean {\n  return dones.some((done) => compare(done, current));\n}\n\n/**\n * 计算两个矩形之间的堆叠区域面积\n */\nfunction getOverlapArea(a: BBox, b: BBox, margin = 0) {\n  const xOverlap = Math.max(\n    0,\n    Math.min(a.x + a.width + margin, b.x + b.width + margin) - Math.max(a.x - margin, b.x - margin)\n  );\n  const yOverlap = Math.max(\n    0,\n    Math.min(a.y + a.height + margin, b.y + b.height + margin) - Math.max(a.y - margin, b.y - margin)\n  );\n\n  return xOverlap * yOverlap;\n}\n\n/**\n * 判断新添加的 Label 是否和已存在的发生重叠\n * @param dones\n * @param current\n */\nfunction checkShapeOverlap(dones: IGroup[], current: IGroup): boolean {\n  return hasSome(dones, current, (left, right) => {\n    const leftText = findLabelTextShape(left);\n    const rightText = findLabelTextShape(right);\n\n    return getOverlapArea(leftText.getCanvasBBox(), rightText.getCanvasBBox(), 2) > 0;\n  });\n}\n/**\n * 适用于 point geometry 的数据标签位置自动调整布局方法\n * @param items\n * @param labels\n * @param shapes\n * @param region\n * @param cfg\n */\nexport function pathAdjustPosition(\n  items: LabelItem[],\n  labels: IGroup[],\n  shapes: IShape[] | IGroup[],\n  region: BBox,\n  cfg: PointAdjustPositionLayoutCfg\n): void {\n  if (shapes.length === 0) {\n    return;\n  }\n\n  const element: Element = shapes[0]?.get('element');\n  const geometry: Geometry = element?.geometry;\n  if (!geometry || ['path', 'line', 'area'].indexOf(geometry.type) < 0) {\n    return;\n  }\n  const [xField, yField] = geometry.getXYFields();\n  const groupedLabels = groupBy(labels, (label) => label.get('data')[xField]);\n  const dones: IGroup[] = [];\n  const offset = (cfg && cfg.offset) || items[0]?.offset || 12;\n\n  map(keys(groupedLabels).reverse(), (xValue) => {\n    const sortedCollections = sortLabels(geometry, groupedLabels[xValue]);\n    while (sortedCollections.length) {\n      const current = sortedCollections.shift();\n      const textShape = findLabelTextShape(current);\n      if (\n        hasSome(\n          dones,\n          current,\n          (left, right) =>\n            left.get('data')[xField] === right.get('data')[xField] &&\n            left.get('data')[yField] === right.get('data')[yField]\n        )\n      ) {\n        // 重复位置，直接隐藏\n        textShape.set('visible', false);\n        continue;\n      }\n      const upFail = checkShapeOverlap(dones, current);\n      let downFail: boolean = false;\n      if (upFail) {\n        textShape.attr('y', textShape.attr('y') + 2 * offset);\n        downFail = checkShapeOverlap(dones, current);\n      }\n      if (downFail) {\n        textShape.set('visible', false);\n        continue;\n      }\n      dones.push(current);\n    }\n  });\n}\n"]}