{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/geometry/shape/area/index.ts"],"names":[],"mappings":";;AAAA,mCAAqC;AAGrC,gCAA8D;AAC9D,+BAAuC;AAEvC,IAAM,gBAAgB,GAAG,2BAAoB,CAAC,MAAM,EAAE;IACpD,gBAAgB,EAAE,MAAM;IACxB,gBAAgB,EAAhB,UAAiB,SAAqB;QACpC,0BAA0B;QAClB,IAAA,CAAC,GAAS,SAAS,EAAlB,EAAE,EAAE,GAAK,SAAS,GAAd,CAAe;QAC5B,IAAM,CAAC,GAAG,cAAO,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC;QAEjE,OAAO,CAAC,CAAC,GAAG,CAAC,UAAC,KAAa;YACzB,OAAO;gBACL,CAAC,EAAE,CAAW;gBACd,CAAC,EAAE,KAAK;aACT,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC;CACF,CAAC,CAAC;AAEH,4BAA4B;AAC5B,oBAAa,CAAC,MAAM,EAAE,MAAM,EAAE;IAC5B,IAAI,EAAJ,UAAK,GAAc,EAAE,SAAiB;QACpC,IAAM,KAAK,GAAG,oBAAa,CAAC,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;QACrD,IAAM,KAAK,GAAG,SAAS,CAAC,QAAQ,CAAC;YAC/B,IAAI,EAAE,MAAM;YACZ,KAAK,OAAA;YACL,IAAI,EAAE,MAAM;SACb,CAAC,CAAC;QAEH,OAAO,KAAK,CAAC;IACf,CAAC;IACD,SAAS,EAAT,UAAU,SAAyB;QACzB,IAAA,KAAK,GAAK,SAAS,MAAd,CAAe;QAC5B,OAAO;YACL,MAAM,EAAE,UAAC,CAAS,EAAE,CAAS,EAAE,CAAe;gBAAf,kBAAA,EAAA,OAAe;gBAC5C,OAAO,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;YACrG,CAAC;YACD,KAAK,EAAE;gBACL,CAAC,EAAE,CAAC;gBACJ,IAAI,EAAE,KAAK;aACZ;SACF,CAAC;IACJ,CAAC;CACF,CAAC,CAAC;AAEH,kBAAe,gBAAgB,CAAC","sourcesContent":["import { isArray } from '@antv/util';\nimport { IGroup } from '../../../dependents';\nimport { Point, ShapeInfo, ShapeMarkerCfg, ShapePoint } from '../../../interface';\nimport { registerShape, registerShapeFactory } from '../base';\nimport { getShapeAttrs } from './util';\n\nconst AreaShapeFactory = registerShapeFactory('area', {\n  defaultShapeType: 'area',\n  getDefaultPoints(pointInfo: ShapePoint): Point[] {\n    // area 基本标记的绘制需要获取上下两边的顶点\n    const { x, y0 } = pointInfo;\n    const y = isArray(pointInfo.y) ? pointInfo.y : [y0, pointInfo.y];\n\n    return y.map((yItem: number) => {\n      return {\n        x: x as number,\n        y: yItem,\n      };\n    });\n  },\n});\n\n// Area 几何标记默认的 shape：填充的区域图\nregisterShape('area', 'area', {\n  draw(cfg: ShapeInfo, container: IGroup) {\n    const attrs = getShapeAttrs(cfg, false, false, this);\n    const shape = container.addShape({\n      type: 'path',\n      attrs,\n      name: 'area',\n    });\n\n    return shape;\n  },\n  getMarker(markerCfg: ShapeMarkerCfg) {\n    const { color } = markerCfg;\n    return {\n      symbol: (x: number, y: number, r: number = 5.5) => {\n        return [['M', x - r, y - 4], ['L', x + r, y - 4], ['L', x + r, y + 4], ['L', x - r, y + 4], ['Z']];\n      },\n      style: {\n        r: 5,\n        fill: color,\n      },\n    };\n  },\n});\n\nexport default AreaShapeFactory;\n"]}