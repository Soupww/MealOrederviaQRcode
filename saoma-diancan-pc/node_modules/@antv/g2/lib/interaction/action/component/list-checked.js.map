{"version":3,"file":"list-checked.js","sourceRoot":"","sources":["../../../../src/interaction/action/component/list-checked.ts"],"names":[],"mappings":";;;AAAA,mCAAwC;AAExC,oEAAqC;AAErC,IAAM,gBAAgB,GAAG,WAAW,CAAC;AACrC,IAAM,cAAc,GAAG,SAAS,CAAC;AAGjC;;;;;;GAMG;AACH;IAA0B,uCAAS;IAAnC;QAAA,qEAkEC;QAjEW,eAAS,GAAW,cAAc,CAAC;;IAiE/C,CAAC;IA/DC,eAAe;IACL,kCAAY,GAAtB,UAAuB,IAAW,EAAE,IAAc,EAAE,MAAe;QACjE,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,UAAC,EAAE,IAAK,OAAA,EAAE,KAAK,IAAI,EAAX,CAAW,EAAE,MAAM,CAAC,CAAC;IACvD,CAAC;IAED,iBAAiB;IACT,kCAAY,GAApB,UAAqB,IAAW,EAAE,QAAuB,EAAE,MAAe;QACxE,IAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;QAC9B,IAAI,MAAM,EAAE;YACV,iCAAiC;YACjC,WAAI,CAAC,KAAK,EAAE,UAAC,IAAI;gBACf,IAAI,QAAQ,CAAC,IAAI,CAAC,EAAE;oBAClB,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,gBAAgB,CAAC,EAAE;wBACzC,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,gBAAgB,EAAE,KAAK,CAAC,CAAC;qBAClD;oBACD,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,cAAc,EAAE,IAAI,CAAC,CAAC;iBAC/C;qBAAM,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,cAAc,CAAC,EAAE;oBAC/C,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,gBAAgB,EAAE,IAAI,CAAC,CAAC;iBACjD;YACH,CAAC,CAAC,CAAC;SACJ;IACH,CAAC;IAED;;;;;OAKG;IACI,4BAAM,GAAb;QACE,IAAM,WAAW,GAAG,IAAI,CAAC,kBAAkB,EAAE,CAAC;QAC9C,IAAI,WAAW,IAAI,WAAW,CAAC,IAAI,EAAE;YAC3B,IAAA,MAAI,GAAW,WAAW,KAAtB,EAAE,IAAI,GAAK,WAAW,KAAhB,CAAiB;YAEnC,gCAAgC;YAChC,IAAM,UAAU,GAAG,CAAC,WAAI,CAAC,MAAI,CAAC,QAAQ,EAAE,EAAE,UAAC,CAAC,IAAK,OAAA,MAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,gBAAgB,CAAC,EAAlC,CAAkC,CAAC,CAAC;YAErF,GAAG;YACH,IAAI,UAAU,IAAI,MAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,gBAAgB,CAAC,EAAE;gBACvD,IAAI,CAAC,YAAY,CAAC,MAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;aACrC;iBAAM;gBACL,IAAI,CAAC,KAAK,EAAE,CAAC;aACd;SACF;IACH,CAAC;IAED;;OAEG;IACI,6BAAO,GAAd;QACE,IAAI,CAAC,QAAQ,EAAE,CAAC;IAClB,CAAC;IAED;;OAEG;IACI,2BAAK,GAAZ;QACE,IAAM,UAAU,GAAG,IAAI,CAAC,kBAAkB,EAAE,CAAC;QAC7C,WAAI,CAAC,UAAU,EAAE,UAAC,SAAS;YACzB,SAAS,CAAC,eAAe,CAAC,cAAc,CAAC,CAAC;YAC1C,SAAS,CAAC,eAAe,CAAC,gBAAgB,CAAC,CAAC;QAC9C,CAAC,CAAC,CAAC;IACL,CAAC;IACH,kBAAC;AAAD,CAAC,AAlED,CAA0B,oBAAS,GAkElC;AAED,kBAAe,WAAW,CAAC","sourcesContent":["import { each, some } from '@antv/util';\nimport { IList, ListItem } from '../../../dependents';\nimport ListState from './list-state';\n\nconst STATUS_UNCHECKED = 'unchecked';\nconst STATUS_CHECKED = 'checked';\ntype MatchCallback = (item: ListItem) => boolean;\n\n/**\n * checked Action\n * 提供三个对外方法\n * 1. toggle 切换状态\n * 2. checked 选中\n * 3. reset 清除重置\n */\nclass ListChecked extends ListState {\n  protected stateName: string = STATUS_CHECKED;\n\n  // 单个 item 设置状态\n  protected setItemState(list: IList, item: ListItem, enable: boolean) {\n    this.setCheckedBy(list, (el) => el === item, enable);\n  }\n\n  // 根据条件设置 checked\n  private setCheckedBy(list: IList, callback: MatchCallback, enable: boolean) {\n    const items = list.getItems();\n    if (enable) {\n      // 设置 checked 时，保留之前已经 checked 的项\n      each(items, (item) => {\n        if (callback(item)) {\n          if (list.hasState(item, STATUS_UNCHECKED)) {\n            list.setItemState(item, STATUS_UNCHECKED, false);\n          }\n          list.setItemState(item, STATUS_CHECKED, true);\n        } else if (!list.hasState(item, STATUS_CHECKED)) {\n          list.setItemState(item, STATUS_UNCHECKED, true);\n        }\n      });\n    }\n  }\n\n  /**\n   * 切换状态.\n   * 1. 当全部选中的时候 或者 当前 item 未选中时，进行激活操作\n   * 2. 否则，重置\n   * @override\n   */\n  public toggle() {\n    const triggerInfo = this.getTriggerListInfo();\n    if (triggerInfo && triggerInfo.item) {\n      const { list, item } = triggerInfo;\n\n      // 不知道 🤷‍♀️ 只认 unchecked status\n      const allChecked = !some(list.getItems(), (t) => list.hasState(t, STATUS_UNCHECKED));\n\n      // \n      if (allChecked || list.hasState(item, STATUS_UNCHECKED)) {\n        this.setItemState(list, item, true);\n      } else {\n        this.reset();\n      }\n    }\n  }\n\n  /**\n   * checked 图例项\n   */\n  public checked() {\n    this.setState();\n  }\n\n  /**\n   * 重置，需要全部清理 checked 和 unchecked\n   */\n  public reset() {\n    const components = this.getAllowComponents();\n    each(components, (component) => {\n      component.clearItemsState(STATUS_CHECKED);\n      component.clearItemsState(STATUS_UNCHECKED);\n    });\n  }\n}\n\nexport default ListChecked;\n"]}