{"version":3,"file":"filter.js","sourceRoot":"","sources":["../../../../src/interaction/action/element/filter.ts"],"names":[],"mappings":"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","sourcesContent":["import { each } from '@antv/util';\nimport Action from '../base';\nimport {\n  getDelegationObject,\n  getElements,\n  getElementValue,\n  getScaleByField,\n  isList,\n  isSlider,\n  isMask,\n  getMaskedElements,\n} from '../util';\n/**\n * 元素过滤的 Action，控制元素的显示隐藏\n * @ignore\n */\nclass ElementFilter extends Action {\n  /**\n   * 过滤\n   */\n  public filter() {\n    const delegateObject = getDelegationObject(this.context);\n    const view = this.context.view;\n    const elements = getElements(view);\n    if (isMask(this.context)) {\n      const maskElements = getMaskedElements(this.context, 10);\n      if (maskElements) {\n        each(elements, (el) => {\n          if (maskElements.includes(el)) {\n            el.show();\n          } else {\n            el.hide();\n          }\n        });\n      }\n    } else if (delegateObject) {\n      const { component } = delegateObject;\n      const field = component.get('field');\n      // 列表类的组件能够触发\n      if (isList(delegateObject)) {\n        if (field) {\n          const unCheckedItems = component.getItemsByState('unchecked');\n          const scale = getScaleByField(view, field);\n          const names = unCheckedItems.map((item) => item.name);\n          // 直接控制显示、隐藏\n          each(elements, (el) => {\n            const value = getElementValue(el, field);\n            const text = scale.getText(value);\n            if (names.indexOf(text) >= 0) {\n              el.hide();\n            } else {\n              el.show();\n            }\n          });\n        }\n      } else if (isSlider(delegateObject)) {\n        const range = component.getValue();\n        const [min, max] = range;\n        each(elements, (el) => {\n          const value = getElementValue(el, field);\n          if (value >= min && value <= max) {\n            el.show();\n          } else {\n            el.hide();\n          }\n        });\n      }\n    }\n  }\n  /**\n   * 清除过滤\n   */\n  public clear() {\n    const elements = getElements(this.context.view);\n    each(elements, (el) => {\n      el.show();\n    });\n  }\n\n  /**\n   * 恢复发生的过滤，保持同 data-filter 命名的一致\n   */\n  public reset() {\n    this.clear();\n  }\n}\n\nexport default ElementFilter;\n"]}