{"version":3,"file":"list-highlight.js","sourceRoot":"","sources":["../../../../src/interaction/action/component/list-highlight.ts"],"names":[],"mappings":"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","sourcesContent":["import { each } from '@antv/util';\nimport { IList, ListItem } from '../../../dependents';\nimport { clearList } from './list-highlight-util';\nimport ListState from './list-state';\nconst STATUS_UNACTIVE = 'inactive';\nconst STATUS_ACTIVE = 'active';\ntype MatchCallback = (item: ListItem) => boolean;\n\n/**\n * highlight Action 的效果是 active 和 inactive 两个状态的组合\n * @class\n * @ignore\n */\nclass ListHighlight extends ListState {\n  protected stateName: string = STATUS_ACTIVE;\n  protected ignoreItemStates = ['unchecked']; // 当存在 unchecked 状态时不触发\n  // 如果 item.name 匹配，则设置 highlight 以及取消\n  protected setItemsState(list: IList, name: string, enable: boolean) {\n    this.setHighlightBy(list, (item) => item.name === name, enable);\n  }\n\n  // 单个 item 设置状态\n  protected setItemState(list: IList, item: ListItem, enable: boolean) {\n    const items = list.getItems();\n    this.setHighlightBy(list, (el) => el === item, enable);\n  }\n\n  // 根据条件设置 highlight\n  private setHighlightBy(list: IList, callback: MatchCallback, enable: boolean) {\n    const items = list.getItems();\n    if (enable) {\n      // 设置 highlight 时，保留之前已经 Highlight 的项\n      each(items, (item) => {\n        if (callback(item)) {\n          if (list.hasState(item, STATUS_UNACTIVE)) {\n            list.setItemState(item, STATUS_UNACTIVE, false);\n          }\n          list.setItemState(item, STATUS_ACTIVE, true);\n        } else if (!list.hasState(item, STATUS_ACTIVE)) {\n          list.setItemState(item, STATUS_UNACTIVE, true);\n        }\n      });\n    } else {\n      const activeItems = list.getItemsByState(STATUS_ACTIVE);\n      let allCancel = true;\n      // 检测 activeItems 是否要全部取消\n      each(activeItems, (item) => {\n        if (!callback(item)) {\n          allCancel = false;\n          return false;\n        }\n      });\n      if (allCancel) {\n        this.clear();\n      } else {\n        // 如果不是都要取消 highlight, 则设置匹配的 element 的状态为 unactive\n        // 其他 element 状态不变\n        each(items, (item) => {\n          if (callback(item)) {\n            if (list.hasState(item, STATUS_ACTIVE)) {\n              list.setItemState(item, STATUS_ACTIVE, false);\n            }\n            list.setItemState(item, STATUS_UNACTIVE, true);\n          }\n        });\n      }\n    }\n  }\n\n  /**\n   * highlight 图例项（坐标轴文本）\n   */\n  public highlight() {\n    this.setState();\n  }\n\n  // 需要全部清理 active 和 unactive\n  public clear() {\n    const triggerInfo = this.getTriggerListInfo();\n    if (triggerInfo) {\n      clearList(triggerInfo.list);\n    } else {\n      // 如果不是 component 的事件触发，则所有满足触发条件的组件都清除该状态\n      const components = this.getAllowComponents();\n      each(components, (component) => {\n        component.clearItemsState(STATUS_ACTIVE);\n        component.clearItemsState(STATUS_UNACTIVE);\n      });\n    }\n  }\n}\n\nexport default ListHighlight;\n"]}