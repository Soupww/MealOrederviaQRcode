{"version":3,"file":"list-state.js","sourceRoot":"","sources":["../../../../src/interaction/action/component/list-state.ts"],"names":[],"mappings":"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","sourcesContent":["import { each } from '@antv/util';\nimport { IList, ListItem } from '../../../dependents';\nimport Element from '../../../geometry/element';\nimport { LooseObject } from '../../../interface';\nimport Action from '../base';\nimport { getComponents } from '../util';\nimport { getCurrentElement, getDelegationObject, getElementValue, isList, getScaleByField } from '../util';\n\n/** @ignore */\ninterface ListStateCfg {\n  componentNames: string[];\n}\n\n/**\n * 列表项状态 Action 的基础类\n * @class\n * @ignore\n */\nclass ListState extends Action<ListStateCfg> {\n  protected stateName: string = '';\n  protected ignoreItemStates = [];\n\n  /** 获取触发的列表组件 */\n  protected getTriggerListInfo() {\n    const delegateObject = getDelegationObject(this.context);\n    let info: LooseObject = null;\n    if (isList(delegateObject)) {\n      info = {\n        item: delegateObject.item,\n        list: delegateObject.component,\n      };\n    }\n    return info;\n  }\n  // 获取所有允许执行 Action 的组件\n  protected getAllowComponents() {\n    const view = this.context.view;\n    const components = getComponents(view);\n    const rst = [];\n    each(components, (component) => {\n      if (component.isList() && this.allowSetStateByElement(component)) {\n        rst.push(component);\n      }\n    });\n    return rst;\n  }\n\n  /** 是否存在指定的状态 */\n  protected hasState(list: IList, item: ListItem) {\n    return list.hasState(item, this.stateName);\n  }\n\n  /** 清理组件的状态 */\n  protected clearAllComponentsState() {\n    const components = this.getAllowComponents();\n    each(components, (component) => {\n      component.clearItemsState(this.stateName);\n    });\n  }\n\n  // 不是所有的 component 都能进行 active，目前仅支持分类 scale 对应的组件\n  protected allowSetStateByElement(component): boolean {\n    const field = component.get('field');\n    if (!field) {\n      return false;\n    }\n    if (this.cfg && this.cfg.componentNames) {\n      const name = component.get('name');\n      // 如果配置了限制的 component name，则要进行检测\n      if (this.cfg.componentNames.indexOf(name) === -1) {\n        return false;\n      }\n    }\n    const view = this.context.view;\n    const scale = getScaleByField(view, field);\n    return scale && scale.isCategory;\n  }\n  // 检测是否允许触发对应的状态改变事件\n  private allowSetStateByItem(item: ListItem, list: IList) {\n    const ignoreStates = this.ignoreItemStates;\n    if (ignoreStates.length) {\n      const filterStates = ignoreStates.filter((state) => {\n        return list.hasState(item, state);\n      });\n      return filterStates.length === 0;\n    }\n    return true; // 没有定义忽略的状态时，允许\n  }\n\n  // 设置组件的 item active\n  private setStateByElement(component, element: Element, enable: boolean) {\n    const field = component.get('field');\n    const view = this.context.view;\n    const scale = getScaleByField(view, field);\n    const value = getElementValue(element, field);\n    const text = scale.getText(value);\n    this.setItemsState(component, text, enable);\n  }\n\n  // 设置状态\n  protected setStateEnable(enable: boolean) {\n    const element = getCurrentElement(this.context);\n    if (element) {\n      // trigger by element\n      const components = this.getAllowComponents();\n      each(components, (component) => {\n        this.setStateByElement(component, element, enable);\n      });\n    } else {\n      // 被组件触发\n      const delegateObject = getDelegationObject(this.context);\n      if (isList(delegateObject)) {\n        const { item, component } = delegateObject;\n        if (this.allowSetStateByElement(component) && this.allowSetStateByItem(item, component)) {\n          this.setItemState(component, item, enable);\n        }\n      }\n    }\n  }\n\n  // 多个 item 设置状态\n  protected setItemsState(list: IList, name: string, enable: boolean) {\n    const items = list.getItems();\n    each(items, (item) => {\n      if (item.name === name) {\n        this.setItemState(list, item, enable);\n      }\n    });\n  }\n\n  // 单个 item 设置状态\n  protected setItemState(list: IList, item: ListItem, enable: boolean) {\n    list.setItemState(item, this.stateName, enable);\n  }\n\n  /**\n   * 设置状态\n   */\n  public setState() {\n    this.setStateEnable(true);\n  }\n\n  /**\n   * 取消状态\n   */\n  public reset() {\n    this.setStateEnable(false);\n  }\n\n  /**\n   * 切换状态\n   */\n  public toggle() {\n    const triggerInfo = this.getTriggerListInfo();\n    if (triggerInfo && triggerInfo.item) {\n      const { list, item } = triggerInfo;\n      const enable = this.hasState(list, item);\n      this.setItemState(list, item, !enable);\n    }\n  }\n\n  /**\n   * 取消状态\n   */\n  public clear() {\n    const triggerInfo = this.getTriggerListInfo();\n    if (triggerInfo) {\n      triggerInfo.list.clearItemsState(this.stateName);\n    } else {\n      this.clearAllComponentsState();\n    }\n  }\n}\n\nexport default ListState;\n"]}