{"version":3,"file":"event.js","sourceRoot":"","sources":["../../src/chart/event.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,KAAK,IAAI,MAAM,EAAU,MAAM,eAAe,CAAC;AAIxD;;;GAGG;AACH;IAUE,eAAY,IAAU,EAAE,MAAc,EAAE,IAAY;QAClD,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;IAC1B,CAAC;IAED;;;;;OAKG;IACW,cAAQ,GAAtB,UAAuB,IAAU,EAAE,IAAY,EAAE,IAAW;QAC1D,OAAO,IAAI,KAAK,CAAC,IAAI,EAAE,IAAI,MAAM,CAAC,IAAI,EAAE,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;IACrD,CAAC;IAKD,sBAAW,yBAAM;QAHjB,oDAAoD;QAEpD,0CAA0C;aAC1C;YACE,uCAAuC;YACvC,aAAa;YACb,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;QAC5B,CAAC;;;OAAA;IAGD,sBAAW,wBAAK;QADhB,qBAAqB;aACrB;YACE,OAAO,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC;QACnC,CAAC;;;OAAA;IAGD,sBAAW,oBAAC;QADZ,aAAa;aACb;YACE,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;QACvB,CAAC;;;OAAA;IAGD,sBAAW,oBAAC;QADZ,aAAa;aACb;YACE,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;QACvB,CAAC;;;OAAA;IAGD,sBAAW,0BAAO;QADlB,aAAa;aACb;YACE,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;QAC7B,CAAC;;;OAAA;IAGD,sBAAW,0BAAO;QADlB,aAAa;aACb;YACE,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;QAC7B,CAAC;;;OAAA;IACD,uBAAuB;IAEvB;;;OAGG;IACI,wBAAQ,GAAf;QACE,OAAO,kBAAgB,IAAI,CAAC,IAAI,OAAI,CAAC;IACvC,CAAC;IAED;;;OAGG;IACI,qBAAK,GAAZ;QACE,OAAO,IAAI,KAAK,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;IACtD,CAAC;IACH,YAAC;AAAD,CAAC,AA7ED,IA6EC","sourcesContent":["import { Event as GEvent, IShape } from '../dependents';\nimport { Datum } from '../interface';\nimport View from './view';\n\n/**\n * @todo Whether it can(or necessary to) keep consistent with the structure of G.Event or directly use the structure of G.Event\n * G2 事件的事件包装类，基于 G.Event\n */\nexport default class Event {\n  /** 当前 target 归属的 view 实例 */\n  public view: View;\n  /** 被包装的原生 G 事件 */\n  public gEvent: GEvent;\n  /** 原始数据 */\n  public data?: Datum;\n  /** 事件类型 */\n  public type: string;\n\n  constructor(view: View, gEvent: GEvent, data?: Datum) {\n    this.view = view;\n    this.gEvent = gEvent;\n    this.data = data;\n    this.type = gEvent.type;\n  }\n\n  /**\n   * 非交互产生的事件\n   * @param view\n   * @param type\n   * @param data\n   */\n  public static fromData(view: View, type: string, data: Datum) {\n    return new Event(view, new GEvent(type, {}), data);\n  }\n\n  // below props are proxy props of G.event convenient\n\n  /** the real trigger shape of the event */\n  public get target(): IShape {\n    // @todo G 中事件定义为 object 不正确，这里先 ignore\n    // @ts-ignore\n    return this.gEvent.target;\n  }\n\n  /** 获取对应的 dom 原生时间 */\n  public get event(): any {\n    return this.gEvent.originalEvent;\n  }\n\n  /** x 画布坐标 */\n  public get x(): number {\n    return this.gEvent.x;\n  }\n\n  /** y 画布坐标 */\n  public get y(): number {\n    return this.gEvent.y;\n  }\n\n  /** x 窗口坐标 */\n  public get clientX(): number {\n    return this.gEvent.clientX;\n  }\n\n  /** y 窗口坐标 */\n  public get clientY(): number {\n    return this.gEvent.clientY;\n  }\n  // end for proxy events\n\n  /**\n   * event string\n   * @returns string\n   */\n  public toString(): string {\n    return `[Event (type=${this.type})]`;\n  }\n\n  /**\n   * clone a new event with same attributes\n   * @returns [[Event]]\n   */\n  public clone(): Event {\n    return new Event(this.view, this.gEvent, this.data);\n  }\n}\n"]}