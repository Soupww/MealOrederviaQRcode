{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/chart/layout/index.ts"],"names":[],"mappings":"AAOA;;;;;;;;;;;GAWG;AACH,MAAM,CAAC,OAAO,UAAU,aAAa,CAAC,IAAU;IAC9C,IAAM,IAAI,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;IACxC,IAAM,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;IAC5C,IAAM,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC;IACpD,IAAM,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;IAC5C,IAAM,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC;IAElD,0BAA0B;IAC1B,CAAC,IAAI,EAAE,MAAM,EAAE,SAAS,EAAE,MAAM,EAAE,UAAU,CAAC,CAAC,OAAO,CAAC,UAAC,UAAsB;QAC3E,IAAI,UAAU,EAAE;YACd,UAAU,CAAC,MAAM,EAAE,CAAC;SACrB;IACH,CAAC,CAAC,CAAC;AACL,CAAC","sourcesContent":["import { Controller } from '../controller/base';\nimport View from '../view';\n\n// 布局函数的定义\n// 布局函数的职责：根据 view 中组件信息，计算出最终的图形 padding 数值，以及最终各个组件的布局和位置\nexport type Layout = (view: View) => void;\n\n/**\n * @ignore\n * G2 默认提供的 layout 函数\n * 内置布局函数处理的逻辑：\n *\n * 1. 如果 padding = 'auto'，那么自动根据组件的 direction 来计算 padding 数组\n * 2. 根据 padding 和 direction 去分配对应方向的 padding 数值\n * 3. 移动组件位置\n *\n * 前面 1，2 步骤在 view 中已经做掉了。对于组件响应式布局，可以尝试使用约束布局的方式去求解位置信息。\n * @param view\n */\nexport default function defaultLayout(view: View): void {\n  const axis = view.getController('axis');\n  const legend = view.getController('legend');\n  const annotation = view.getController('annotation');\n  const slider = view.getController('slider');\n  const scrollbar = view.getController('scrollbar');\n\n  // 根据最新的 coordinate 重新布局组件\n  [axis, slider, scrollbar, legend, annotation].forEach((controller: Controller) => {\n    if (controller) {\n      controller.layout();\n    }\n  });\n}\n"]}