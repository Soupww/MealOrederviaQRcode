{"version":3,"file":"util.js","sourceRoot":"","sources":["../../../../src/geometry/shape/point/util.ts"],"names":[],"mappings":";AAEA,OAAO,EAAE,aAAa,EAAE,MAAM,sBAAsB,CAAC;AACrD,OAAO,EAAE,QAAQ,EAAE,MAAM,mBAAmB,CAAC;AAE7C,MAAM,CAAC,IAAM,MAAM,GAAG,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,SAAS,EAAE,SAAS,EAAE,UAAU,EAAE,eAAe,CAAC,CAAC;AACxG,MAAM,CAAC,IAAM,aAAa,GAAG,CAAC,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,CAAC,CAAC;AAEzE;;;;;;;;;GASG;AACH,MAAM,UAAU,UAAU,CACxB,KAAK,EACL,GAAc,EACd,SAAiB,EACjB,SAAiB,EACjB,QAAiB;IAEjB,IAAM,KAAK,GAAG,QAAQ,CAAC,GAAG,EAAE,QAAQ,EAAE,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;IACtD,IAAM,MAAM,GAAG,KAAK,CAAC,WAAW,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IAC7C,IAAI,aAAa,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;IAC9B,IAAI,GAAG,CAAC,OAAO,EAAE;QACf,aAAa,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;KAC3B;SAAM,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;QAC5B,IAAM,KAAK,GAAG,SAAS,CAAC,QAAQ,EAAE,CAAC;QACnC,KAAoB,UAAM,EAAN,iBAAM,EAAN,oBAAM,EAAN,IAAM,EAAE;YAAvB,IAAM,KAAK,eAAA;YACd,KAAK,CAAC,QAAQ,CAAC;gBACb,IAAI,EAAE,QAAQ;gBACd,KAAK,iCACA,KAAK,KACR,MAAM,EAAE,aAAa,CAAC,SAAS,CAAC,IAAI,SAAS,KAC1C,KAAK,CACT;aACF,CAAC,CAAC;SACJ;QACD,OAAO,KAAK,CAAC;KACd;IAED,OAAO,SAAS,CAAC,QAAQ,CAAC;QACxB,IAAI,EAAE,QAAQ;QACd,KAAK,iCACA,KAAK,KACR,MAAM,EAAE,aAAa,CAAC,SAAS,CAAC,IAAI,SAAS,KAC1C,aAAa,CACjB;KACF,CAAC,CAAC;AACL,CAAC","sourcesContent":["import { IGroup, IShape } from '../../../dependents';\nimport { ShapeInfo } from '../../../interface';\nimport { MarkerSymbols } from '../../../util/marker';\nimport { getStyle } from '../util/get-style';\n\nexport const SHAPES = ['circle', 'square', 'bowtie', 'diamond', 'hexagon', 'triangle', 'triangle-down'];\nexport const HOLLOW_SHAPES = ['cross', 'tick', 'plus', 'hyphen', 'line'];\n\n/**\n * @ignore\n * Draws points\n * @param shape\n * @param cfg\n * @param container\n * @param shapeName\n * @param isStroke\n * @returns points\n */\nexport function drawPoints(\n  shape,\n  cfg: ShapeInfo,\n  container: IGroup,\n  shapeName: string,\n  isStroke: boolean\n): IShape | IGroup {\n  const style = getStyle(cfg, isStroke, !isStroke, 'r');\n  const points = shape.parsePoints(cfg.points);\n  let pointPosition = points[0];\n  if (cfg.isStack) {\n    pointPosition = points[1];\n  } else if (points.length > 1) {\n    const group = container.addGroup();\n    for (const point of points) {\n      group.addShape({\n        type: 'marker',\n        attrs: {\n          ...style,\n          symbol: MarkerSymbols[shapeName] || shapeName,\n          ...point,\n        },\n      });\n    }\n    return group;\n  }\n\n  return container.addShape({\n    type: 'marker',\n    attrs: {\n      ...style,\n      symbol: MarkerSymbols[shapeName] || shapeName,\n      ...pointPosition,\n    },\n  });\n}\n"]}