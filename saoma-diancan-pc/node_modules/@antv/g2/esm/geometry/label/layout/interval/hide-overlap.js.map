{"version":3,"file":"hide-overlap.js","sourceRoot":"","sources":["../../../../../src/geometry/label/layout/interval/hide-overlap.ts"],"names":[],"mappings":"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","sourcesContent":["import { IGroup, IShape } from '../../../../dependents';\nimport { each, groupBy, uniq, map, size, filter } from '@antv/util';\nimport Geometry from '../../../base';\nimport Element from '../../../element';\nimport { LabelItem } from '../../interface';\nimport { checkShapeOverlap } from '../../util';\n\nfunction filterLabel(labels: IShape[] | IGroup[]) {\n  const MAX_CNT = 500; // 最多显示 500 个数据标签\n  const filteredLabels = [];\n  const pages = Math.max(Math.floor(labels.length / MAX_CNT), 1);\n  each(labels, (label, idx) => {\n    if (idx % pages === 0) {\n      filteredLabels.push(label);\n    } else {\n      label.set('visible', false);\n    }\n  });\n\n  return filteredLabels;\n}\n\n/**\n * 为 interval geometry 定制的数据标签重叠自动隐藏布局方法\n * @param items\n * @param labels\n * @param shapes\n */\nexport function intervalHideOverlap(items: LabelItem[], labels: IGroup[], shapes: IShape[] | IGroup[]) {\n  if (shapes.length === 0) {\n    return;\n  }\n  const element: Element = shapes[0]?.get('element');\n  const geometry: Geometry = element?.geometry;\n  if (!geometry || geometry.type !== 'interval') {\n    return;\n  }\n\n  const filteredLabels = filterLabel(labels);\n  const [xField] = geometry.getXYFields();\n  const dones: IShape[] = [];\n  const todo: IShape[] = [];\n  const groupedLabels = groupBy(filteredLabels, (label) => label.get('data')[xField]);\n  const xValues = uniq(map(filteredLabels, (label: IShape) => label.get('data')[xField]));\n  let xValue;\n\n  filteredLabels.forEach((label) => {\n    label.set('visible', true);\n  });\n\n  const addCurrentGroup = (curItems: IShape[]) => {\n    if (curItems) {\n      if (curItems.length) {\n        // 最后一个\n        todo.push(curItems.pop());\n      }\n      todo.push(...curItems);\n    }\n  };\n\n  if (size(xValues) > 0) {\n    // 第一组\n    xValue = xValues.shift();\n    addCurrentGroup(groupedLabels[xValue]);\n  }\n  if (size(xValues) > 0) {\n    // 最后一组\n    xValue = xValues.pop();\n    addCurrentGroup(groupedLabels[xValue]);\n  }\n  each(xValues.reverse(), (val) => {\n    // 其他组\n    addCurrentGroup(groupedLabels[val]);\n  });\n\n  while (todo.length > 0) {\n    const cur = todo.shift();\n    if (cur.get('visible')) {\n      if (checkShapeOverlap(cur, dones)) {\n        cur.set('visible', false);\n      } else {\n        dones.push(cur);\n      }\n    }\n  }\n}\n"]}