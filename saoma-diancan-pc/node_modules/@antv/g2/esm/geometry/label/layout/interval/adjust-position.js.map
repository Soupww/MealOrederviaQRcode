{"version":3,"file":"adjust-position.js","sourceRoot":"","sources":["../../../../../src/geometry/label/layout/interval/adjust-position.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,IAAI,EAAE,MAAM,uBAAuB,CAAC;AAI7C,OAAO,EAAE,kBAAkB,EAAE,MAAM,YAAY,CAAC;AAEhD,SAAS,mBAAmB,CAAC,QAAkB,EAAE,KAAa,EAAE,KAAe;IAC7E,IAAM,UAAU,GAAG,QAAQ,CAAC,UAAU,CAAC;IACvC,IAAM,SAAS,GAAG,kBAAkB,CAAC,KAAK,CAAC,CAAC;IAC5C,IAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,aAAa,EAAE,CAAC,CAAC;IAC5D,IAAM,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;IAEnD,OAAO,UAAU,CAAC,YAAY,CAAC,CAAC,CAAC,SAAS,CAAC,MAAM,IAAI,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,SAAS,CAAC,KAAK,IAAI,QAAQ,CAAC,KAAK,CAAC;AAC3G,CAAC;AAED,SAAS,aAAa,CAAC,QAAkB,EAAE,MAAgB,EAAE,MAA2B;IACtF,IAAM,OAAO,GAAG,CAAC,CAAC,QAAQ,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;IAE9C,OAAO,CACL,OAAO;QACP,MAAM,CAAC,KAAK,CAAC,UAAC,KAAa,EAAE,KAAa;YACxC,IAAM,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;YAC5B,OAAO,mBAAmB,CAAC,QAAQ,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;QACrD,CAAC,CAAC,CACH,CAAC;AACJ,CAAC;AAED,SAAS,WAAW,CAAC,QAAkB,EAAE,KAAa,EAAE,KAAe;IACrE,IAAM,UAAU,GAAG,QAAQ,CAAC,UAAU,CAAC;IACvC,IAAM,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;IACnD,IAAM,SAAS,GAAG,kBAAkB,CAAC,KAAK,CAAC,CAAC;IAE5C,IAAI,UAAU,CAAC,YAAY,EAAE;QAC3B,aAAa;QACb,SAAS,CAAC,IAAI,CAAC;YACb,CAAC,EAAE,SAAS,CAAC,IAAI,GAAG,SAAS,CAAC,KAAK,GAAG,CAAC;YACvC,SAAS,EAAE,QAAQ;SACpB,CAAC,CAAC;KACJ;SAAM;QACL,aAAa;QACb,SAAS,CAAC,IAAI,CAAC;YACb,CAAC,EAAE,SAAS,CAAC,IAAI,GAAG,SAAS,CAAC,MAAM,GAAG,CAAC;YACxC,YAAY,EAAE,QAAQ;SACvB,CAAC,CAAC;KACJ;AACH,CAAC;AAED;;;;;GAKG;AACH,MAAM,UAAU,sBAAsB,CAAC,KAAkB,EAAE,MAAgB,EAAE,MAA2B;;IACtG,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;QACvB,OAAO;KACR;IACD,IAAM,OAAO,SAAY,MAAM,CAAC,CAAC,CAAC,0CAAE,GAAG,CAAC,SAAS,CAAC,CAAC;IACnD,IAAM,QAAQ,GAAa,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,QAAQ,CAAC;IAC7C,IAAI,CAAC,QAAQ,IAAI,QAAQ,CAAC,IAAI,KAAK,UAAU,EAAE;QAC7C,OAAO;KACR;IAED,IAAM,OAAO,GAAG,aAAa,CAAC,QAAQ,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;IACxD,IAAI,OAAO,EAAE;QACX,MAAM,CAAC,OAAO,CAAC,UAAC,KAAsB,EAAE,KAAa;YACnD,IAAM,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;YAC5B,WAAW,CAAC,QAAQ,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;KACJ;AACH,CAAC","sourcesContent":["import { IElement, IGroup, IShape } from '../../../../dependents';\nimport { BBox } from '../../../../util/bbox';\nimport Geometry from '../../../base';\nimport Element from '../../../element';\nimport { LabelItem } from '../../interface';\nimport { findLabelTextShape } from '../../util';\n\nfunction shouldInShapeSingle(geometry: Geometry, label: IGroup, shape: IElement): boolean {\n  const coordinate = geometry.coordinate;\n  const textShape = findLabelTextShape(label);\n  const textBBox = BBox.fromObject(textShape.getCanvasBBox());\n  const shapeBBox = BBox.fromObject(shape.getBBox());\n\n  return coordinate.isTransposed ? shapeBBox.height >= textBBox.height : shapeBBox.width >= textBBox.width;\n}\n\nfunction shouldInShape(geometry: Geometry, labels: IGroup[], shapes: IShape[] | IGroup[]): boolean {\n  const isStack = !!geometry.getAdjust('stack');\n\n  return (\n    isStack ||\n    labels.every((label: IGroup, index: number) => {\n      const shape = shapes[index];\n      return shouldInShapeSingle(geometry, label, shape);\n    })\n  );\n}\n\nfunction moveInShape(geometry: Geometry, label: IGroup, shape: IElement): void {\n  const coordinate = geometry.coordinate;\n  const shapeBBox = BBox.fromObject(shape.getBBox());\n  const textShape = findLabelTextShape(label);\n\n  if (coordinate.isTransposed) {\n    // 水平方向：条形图系列\n    textShape.attr({\n      x: shapeBBox.minX + shapeBBox.width / 2,\n      textAlign: 'center',\n    });\n  } else {\n    // 垂直方向：柱形图系列\n    textShape.attr({\n      y: shapeBBox.minY + shapeBBox.height / 2,\n      textBaseline: 'middle',\n    });\n  }\n}\n\n/**\n * 适用于 interval geometry 的数据标签位置自动调整布局方法\n * @param items\n * @param labels\n * @param shapes\n */\nexport function intervalAdjustPosition(items: LabelItem[], labels: IGroup[], shapes: IShape[] | IGroup[]) {\n  if (shapes.length === 0) {\n    return;\n  }\n  const element: Element = shapes[0]?.get('element');\n  const geometry: Geometry = element?.geometry;\n  if (!geometry || geometry.type !== 'interval') {\n    return;\n  }\n\n  const inShape = shouldInShape(geometry, labels, shapes);\n  if (inShape) {\n    shapes.forEach((shape: IShape | IGroup, index: number) => {\n      const label = labels[index];\n      moveInShape(geometry, label, shape);\n    });\n  }\n}\n"]}