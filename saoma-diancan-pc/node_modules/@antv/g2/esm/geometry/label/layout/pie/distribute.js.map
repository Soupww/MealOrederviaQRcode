{"version":3,"file":"distribute.js","sourceRoot":"","sources":["../../../../../src/geometry/label/layout/pie/distribute.ts"],"names":[],"mappings":"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","sourcesContent":["import { isObject, each, find, get } from '@antv/util';\n\nimport { BBox, IGroup, IShape } from '../../../../dependents';\nimport { LabelItem } from '../../interface';\n\nimport { polarToCartesian } from '../../../../util/graphics';\nimport { IElement } from '@antv/g-base';\n\n/** label text和line距离 4px */\nconst MARGIN = 4;\n\nfunction antiCollision(labelShapes, labels, lineHeight, plotRange, center, isRight) {\n  // adjust y position of labels to avoid overlapping\n  let overlapping = true;\n  const start = plotRange.start;\n  const end = plotRange.end;\n  const startY = Math.min(start.y, end.y);\n  let totalHeight = Math.abs(start.y - end.y);\n  let i;\n\n  let maxY = 0;\n  let minY = Number.MIN_VALUE;\n  const boxes = labels.map((label) => {\n    if (label.y > maxY) {\n      maxY = label.y;\n    }\n    if (label.y < minY) {\n      minY = label.y;\n    }\n    return {\n      size: lineHeight,\n      targets: [label.y - startY],\n    };\n  });\n  minY -= startY;\n  if (maxY - startY > totalHeight) {\n    totalHeight = maxY - startY;\n  }\n\n  while (overlapping) {\n    /* eslint no-loop-func: 0 */\n    boxes.forEach((box) => {\n      const target = (Math.min.apply(minY, box.targets) + Math.max.apply(minY, box.targets)) / 2;\n      box.pos = Math.min(Math.max(minY, target - box.size / 2), totalHeight - box.size);\n      // box.pos = Math.max(0, target - box.size / 2);\n    });\n\n    // detect overlapping and join boxes\n    overlapping = false;\n    i = boxes.length;\n    while (i--) {\n      if (i > 0) {\n        const previousBox = boxes[i - 1];\n        const box = boxes[i];\n        if (previousBox.pos + previousBox.size > box.pos) {\n          // overlapping\n          previousBox.size += box.size;\n          previousBox.targets = previousBox.targets.concat(box.targets);\n\n          // overflow, shift up\n          if (previousBox.pos + previousBox.size > totalHeight) {\n            previousBox.pos = totalHeight - previousBox.size;\n          }\n          boxes.splice(i, 1); // removing box\n          overlapping = true;\n        }\n      }\n    }\n  }\n\n  i = 0;\n  // step 4: normalize y and adjust x\n  boxes.forEach((b) => {\n    let posInCompositeBox = startY + lineHeight / 2; // middle of the label\n    b.targets.forEach(() => {\n      labels[i].y = b.pos + posInCompositeBox;\n      posInCompositeBox += lineHeight;\n      i++;\n    });\n  });\n\n  const labelsMap = {};\n  for (const labelShape of labelShapes) {\n    labelsMap[labelShape.get('id')] = labelShape;\n  }\n\n  // (x - cx)^2 + (y - cy)^2 = totalR^2\n  labels.forEach((label) => {\n    const rPow2 = label.r * label.r;\n    const dyPow2 = Math.pow(Math.abs(label.y - center.y), 2);\n    if (rPow2 < dyPow2) {\n      label.x = center.x;\n    } else {\n      const dx = Math.sqrt(rPow2 - dyPow2);\n      if (!isRight) {\n        // left\n        label.x = center.x - dx;\n      } else {\n        // right\n        label.x = center.x + dx;\n      }\n    }\n\n    // adjust labelShape\n    const labelShape = labelsMap[label.id];\n    labelShape.attr('x', label.x);\n    labelShape.attr('y', label.y);\n\n    // because group could not effect text-shape, should set text-shape position manually\n    const textShape = find(labelShape.getChildren(), (ele) => ele.get('type') === 'text') as IElement;\n    // @ts-ignore\n    if (textShape) {\n      textShape.attr('y', label.y);\n      textShape.attr('x', label.x);\n    }\n  });\n}\n\nexport function distribute(items: LabelItem[], labels: IGroup[], shapes: IShape[] | IGroup[], region: BBox) {\n  if (!items.length || !labels.length) {\n    return;\n  }\n  const offset = items[0] ? items[0].offset : 0;\n  const coordinate = labels[0].get('coordinate');\n  const radius = coordinate.getRadius();\n  const center = coordinate.getCenter();\n\n  if (offset > 0) {\n    // const lineHeight = get(this.geometry.theme, ['pieLabels', 'labelHeight'], 14);\n    const lineHeight = 14; // TODO\n    const totalR = radius + offset;\n    const totalHeight = totalR * 2 + lineHeight * 2;\n    const plotRange = {\n      start: coordinate.start,\n      end: coordinate.end,\n    };\n\n    // step 1: separate labels\n    const halves = [\n      [], // left\n      [], // right\n    ];\n    items.forEach((labelItem) => {\n      if (!labelItem) {\n        return;\n      }\n      if (labelItem.textAlign === 'right') {\n        // left\n        halves[0].push(labelItem);\n      } else {\n        // right or center will be put on the right side\n        halves[1].push(labelItem);\n      }\n    });\n\n    halves.forEach((half, index) => {\n      // step 2: reduce labels\n      const maxLabelsCountForOneSide = totalHeight / lineHeight;\n      if (half.length > maxLabelsCountForOneSide) {\n        half.sort((a, b) => {\n          // sort by percentage DESC\n          return b['..percent'] - a['..percent'];\n        });\n        half.splice(maxLabelsCountForOneSide, half.length - maxLabelsCountForOneSide);\n      }\n\n      // step 3: distribute position (x and y)\n      half.sort((a, b) => {\n        // sort by y ASC\n        return a.y - b.y;\n      });\n\n      antiCollision(labels, half, lineHeight, plotRange, center, index);\n    });\n  }\n\n  // 配置 labelLine\n  each(items, (item) => {\n    if (item && item.labelLine) {\n      const distance = item.offset;\n      const angle = item.angle;\n      // 贴近圆周\n      const startPoint = polarToCartesian(center.x, center.y, radius, angle);\n      const innerPoint = polarToCartesian(center.x, center.y, radius + distance / 2, angle);\n      const itemX = item.x + get(item, 'offsetX', 0);\n      const itemY = item.y + get(item, 'offsetY', 0);\n      const endPoint = {\n        x: itemX - Math.cos(angle) * MARGIN,\n        y: itemY - Math.sin(angle) * MARGIN,\n      };\n      if (!isObject(item.labelLine)) {\n        // labelLine: true\n        item.labelLine = {};\n      }\n      item.labelLine.path = [\n        `M ${startPoint.x}`,\n        `${startPoint.y} Q${innerPoint.x}`,\n        `${innerPoint.y} ${endPoint.x}`,\n        endPoint.y,\n      ].join(',');\n    }\n  });\n}\n"]}