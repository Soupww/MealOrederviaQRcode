{"version":3,"file":"percent.js","sourceRoot":"","sources":["../../../src/utils/transform/percent.ts"],"names":[],"mappings":"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","sourcesContent":["import { map, reduce } from '@antv/util';\nimport { Data, Datum } from '../../types';\nimport { isRealNumber } from '../number';\n\n/**\n * 对数据进行百分比化\n * @param data\n * @param measure\n * @param groupField\n * @param as\n */\nexport function percent(data: Data, measure: string, groupField: string, as: string) {\n  // 1. 先计算每一个分组的 max 值\n  const sumMap = reduce(\n    data,\n    (map, datum: Datum) => {\n      const groupValue = datum[groupField];\n      let sum = map.has(groupValue) ? map.get(groupValue) : 0;\n\n      const v = datum[measure];\n\n      sum = isRealNumber(v) ? sum + v : sum;\n      map.set(groupValue, sum);\n\n      return map;\n    },\n    new Map<string, number>()\n  );\n\n  // 2. 循环数组，计算占比\n  return map(data, (datum: Datum) => {\n    const v = datum[measure];\n    const groupValue = datum[groupField];\n    const percentage = isRealNumber(v) ? v / sumMap.get(groupValue) : 0;\n\n    return {\n      ...datum,\n      [as]: percentage,\n    };\n  });\n}\n\n/**\n * 对数据进行深层百分比化\n * @param data\n * @param measure  // 数值\n * @param fields // 需要分组的 field值\n * @param as // 存储percent 百分比的值\n */\nexport function getDeepPercent(data: Record<string, any>[], measure: string, fields: string[], percent: string) {\n  const sumMap = reduce(\n    data,\n    (map, datum: Datum) => {\n      // 获取分组得到的枚举key值\n      const groupValue = reduce(fields, (value, field) => `${value}${datum[field]}`, '');\n\n      let sum = map.has(groupValue) ? map.get(groupValue) : 0;\n\n      const v = datum[measure];\n\n      sum = isRealNumber(v) ? sum + v : sum;\n      map.set(groupValue, sum);\n\n      return map;\n    },\n    new Map<string, number>()\n  );\n\n  // 2. 循环数组，计算占比\n  return map(data, (datum: Datum) => {\n    const v = datum[measure];\n    // 获取分组得到的枚举key值\n    const groupValue = reduce(fields, (value, field) => `${value}${datum[field]}`, '');\n\n    const percentage = isRealNumber(v) ? v / sumMap.get(groupValue) : 0;\n\n    return {\n      ...datum,\n      [percent]: percentage,\n    };\n  });\n}\n\n/**\n * 获取数据，如果是百分比，进行数据转换 (适用于面积图、柱状图、条形图)\n * @param isPercent 是否百分比\n */\nexport function getDataWhetherPecentage(\n  data: Record<string, any>[],\n  yField: string,\n  groupField: string,\n  asField: string,\n  isPercent?: boolean\n) {\n  return !isPercent ? data : percent(data, yField, groupField, asField);\n}\n"]}