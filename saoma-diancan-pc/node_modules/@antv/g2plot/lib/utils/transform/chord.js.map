{"version":3,"file":"chord.js","sourceRoot":"","sources":["../../../src/utils/transform/chord.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * for Arc Diagram (edges without weight) / Chord Diagram (edges with source and target weight)\n * graph data required (nodes, edges)\n */\nimport { assign, forIn, isFunction } from '@antv/util';\nimport { NodeLinkData } from '../../types/relation-data';\n\nconst DEFAULT_OPTIONS: ChordLayoutOptions = {\n  y: 0,\n  nodeWidthRatio: 0.05, // width of the node, (0, 1)\n  weight: false,\n  nodePaddingRatio: 0.1, // margin ratio, [0, 1)\n  id: (node) => node.id,\n  source: (edge) => edge.source,\n  target: (edge) => edge.target,\n  sourceWeight: (edge) => edge.value || 1,\n  targetWeight: (edge) => edge.value || 1,\n  sortBy: null, // optional, id | weight | frequency | {function}\n};\n\nexport type ChordLayoutOptions = {\n  weight?: boolean;\n  y?: number;\n  nodeWidthRatio?: number; // 节点的宽度比例，对应于极坐标系的厚度，(0, 1)\n  nodePaddingRatio?: number; // 节点之间的间距的比例，[0, 1)\n  id?(node: any): any;\n  source?(edge: any): any;\n  target?(edge: any): any;\n  sourceWeight?(edge: any): number;\n  targetWeight?(edge: any): number;\n  sortBy?: 'id' | 'weight' | 'frequency' | null | ((a: any, b: any) => number);\n};\n\ntype OutputNode = {\n  readonly id: number;\n  readonly name: string;\n  // readonly depth: number;\n  readonly value: number;\n\n  // 用于绘制 polygon\n  x: number[];\n  y: number[];\n};\n\ntype OutputLink = {\n  readonly source: OutputNode;\n  readonly target: OutputNode;\n  readonly value: number;\n\n  // 用于绘制 edge\n  x?: number[];\n  y?: number[];\n};\n\ntype ChordLayoutOutputData = {\n  readonly nodes: OutputNode[];\n  readonly links: OutputLink[];\n};\n\n/**\n * 处理节点的value、edges\n * @param nodeById\n * @param edges\n * @param options\n */\nfunction processGraph(nodeById, edges, options) {\n  forIn(nodeById, (node, id) => {\n    // in edges, out edges\n    node.inEdges = edges.filter((edge) => `${options.target(edge)}` === `${id}`);\n    node.outEdges = edges.filter((edge) => `${options.source(edge)}` === `${id}`);\n    // frequency\n    node.edges = node.outEdges.concat(node.inEdges);\n    node.frequency = node.edges.length;\n    // weight\n    node.value = 0;\n    node.inEdges.forEach((edge) => {\n      node.value += options.targetWeight(edge);\n    });\n    node.outEdges.forEach((edge) => {\n      node.value += options.sourceWeight(edge);\n    });\n  });\n}\n\n/**\n * 节点排序\n * @param nodes\n * @param options\n */\nfunction sortNodes(nodes, options) {\n  const sortMethods = {\n    weight: (a, b) => b.value - a.value,\n    frequency: (a, b) => b.frequency - a.frequency,\n    id: (a, b) => `${options.id(a)}`.localeCompare(`${options.id(b)}`),\n  };\n  let method = sortMethods[options.sortBy];\n  if (!method && isFunction(options.sortBy)) {\n    method = options.sortBy;\n  }\n  if (method) {\n    nodes.sort(method);\n  }\n}\n\nfunction layoutNodes(nodes, options): OutputNode[] {\n  const len = nodes.length;\n  if (!len) {\n    throw new TypeError(\"Invalid nodes: it's empty!\");\n  }\n  if (options.weight) {\n    const nodePaddingRatio = options.nodePaddingRatio;\n    if (nodePaddingRatio < 0 || nodePaddingRatio >= 1) {\n      throw new TypeError('Invalid nodePaddingRatio: it must be in range [0, 1)!');\n    }\n    const margin = nodePaddingRatio / (2 * len);\n    const nodeWidthRatio = options.nodeWidthRatio;\n    if (nodeWidthRatio <= 0 || nodeWidthRatio >= 1) {\n      throw new TypeError('Invalid nodeWidthRatio: it must be in range (0, 1)!');\n    }\n    let totalValue = 0;\n    nodes.forEach((node) => {\n      totalValue += node.value;\n    });\n    nodes.forEach((node) => {\n      node.weight = node.value / totalValue;\n      node.width = node.weight * (1 - nodePaddingRatio);\n      node.height = nodeWidthRatio;\n    });\n    nodes.forEach((node, index) => {\n      // x\n      let deltaX = 0;\n      for (let i = index - 1; i >= 0; i--) {\n        deltaX += nodes[i].width + 2 * margin;\n      }\n      const minX = (node.minX = margin + deltaX);\n      const maxX = (node.maxX = node.minX + node.width);\n      const minY = (node.minY = options.y - nodeWidthRatio / 2);\n      const maxY = (node.maxY = minY + nodeWidthRatio);\n      node.x = [minX, maxX, maxX, minX];\n      node.y = [minY, minY, maxY, maxY];\n      /* points\n       * 3---2\n       * |   |\n       * 0---1\n       */\n      // node.x = minX + 0.5 * node.width;\n      // node.y = options.y;\n    });\n  } else {\n    const deltaX = 1 / len;\n    nodes.forEach((node, index) => {\n      node.x = (index + 0.5) * deltaX;\n      node.y = options.y;\n    });\n  }\n  return nodes;\n}\n\nfunction locatingEdges(nodeById, edges, options): OutputLink[] {\n  if (options.weight) {\n    const valueById = {};\n    forIn(nodeById, (node, id) => {\n      valueById[id] = node.value;\n    });\n    edges.forEach((edge) => {\n      const sId = options.source(edge);\n      const tId = options.target(edge);\n      const sNode = nodeById[sId];\n      const tNode = nodeById[tId];\n      if (sNode && tNode) {\n        const sValue = valueById[sId];\n        const currentSValue = options.sourceWeight(edge);\n        const sStart = sNode.minX + ((sNode.value - sValue) / sNode.value) * sNode.width;\n        const sEnd = sStart + (currentSValue / sNode.value) * sNode.width;\n        valueById[sId] -= currentSValue;\n\n        const tValue = valueById[tId];\n        const currentTValue = options.targetWeight(edge);\n        const tStart = tNode.minX + ((tNode.value - tValue) / tNode.value) * tNode.width;\n        const tEnd = tStart + (currentTValue / tNode.value) * tNode.width;\n        valueById[tId] -= currentTValue;\n\n        const y = options.y;\n        edge.x = [sStart, sEnd, tStart, tEnd];\n        edge.y = [y, y, y, y];\n        // 将edge的source与target的id换为 sourceNode与targetNode\n        edge.source = sNode;\n        edge.target = tNode;\n      }\n    });\n  } else {\n    edges.forEach((edge) => {\n      const sNode = nodeById[options.source(edge)];\n      const tNode = nodeById[options.target(edge)];\n      if (sNode && tNode) {\n        edge.x = [sNode.x, tNode.x];\n        edge.y = [sNode.y, tNode.y];\n        // 将edge的source与target的id换为 sourceNode与targetNode\n        edge.source = sNode;\n        edge.target = tNode;\n      }\n    });\n  }\n  return edges;\n}\n\nexport function getDefaultOptions(options: ChordLayoutOptions): ChordLayoutOptions {\n  return assign({}, DEFAULT_OPTIONS, options);\n}\n\nexport function chordLayout(\n  chordLayoutOptions: ChordLayoutOptions,\n  chordLayoutInputData: NodeLinkData\n): ChordLayoutOutputData {\n  const options = getDefaultOptions(chordLayoutOptions);\n  const nodeById = {};\n  const nodes = chordLayoutInputData.nodes;\n  const links = chordLayoutInputData.links;\n  nodes.forEach((node) => {\n    const id = options.id(node);\n    nodeById[id] = node;\n  });\n  processGraph(nodeById, links, options);\n  sortNodes(nodes, options);\n  const outputNodes = layoutNodes(nodes, options);\n  const outputLinks = locatingEdges(nodeById, links, options);\n  return {\n    nodes: outputNodes,\n    links: outputLinks,\n  };\n}\n"]}