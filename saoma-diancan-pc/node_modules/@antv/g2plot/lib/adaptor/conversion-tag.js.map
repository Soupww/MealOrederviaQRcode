{"version":3,"file":"conversion-tag.js","sourceRoot":"","sources":["../../src/adaptor/conversion-tag.ts"],"names":[],"mappings":"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","sourcesContent":["import { map, find, each, isObject } from '@antv/util';\nimport { Coordinate, IGroup, ShapeAttrs, Element, Geometry, View, getTheme } from '@antv/g2';\nimport { Params } from '../core/adaptor';\nimport { deepAssign } from '../utils';\nimport { conversionTagFormatter } from '../utils/conversion';\nimport { Options } from '../types';\n\n/** 转化率组件配置选项 */\nexport interface ConversionTagOptions {\n  /** tag 高度 */\n  size?: number;\n  /** tag 对柱子间距 */\n  spacing?: number;\n  /** tag 距离轴线距离 */\n  offset?: number;\n  /** 箭头形状配置 */\n  arrow?:\n    | {\n        /** 箭头宽度 */\n        headSize?: number;\n        /** 箭头样式 */\n        style?: ShapeAttrs;\n      }\n    | false;\n  /** 文本配置 */\n  text?:\n    | {\n        /** 文字大小 */\n        size?: number;\n        /** 文字样式 */\n        style?: ShapeAttrs;\n        /** 文本格式化 */\n        formatter?: (prev: number, next: number) => string;\n      }\n    | false;\n}\n\nexport interface OptionWithConversionTag {\n  conversionTag?: ConversionTagOptions | false;\n}\n\n/** 控制转化率组件绘制的选项 */\ntype TagRenderConfig = {\n  /** 所在的 View */\n  view: View;\n  /** 所属的 geometry */\n  geometry: Geometry;\n  /** 转化率组件的 group */\n  group: IGroup;\n  /** 转化率配置 */\n  options: ConversionTagOptions;\n  /** 用于转化率计算的字段 */\n  field: string;\n  /** 水平/垂直 */\n  horizontal: boolean;\n};\n\nfunction getConversionTagOptionsWithDefaults(options: ConversionTagOptions, horizontal: boolean): ConversionTagOptions {\n  return deepAssign(\n    {\n      size: horizontal ? 32 : 80,\n      spacing: horizontal ? 8 : 12,\n      offset: horizontal ? 32 : 0,\n      arrow: options.arrow !== false && {\n        headSize: 12,\n        style: {\n          fill: 'rgba(0, 0, 0, 0.05)',\n        },\n      },\n      text: options.text !== false && {\n        style: {\n          fontSize: 12,\n          fill: 'rgba(0, 0, 0, 0.85)',\n          textAlign: 'center',\n          textBaseline: 'middle',\n        },\n        formatter: conversionTagFormatter,\n      },\n    },\n    options\n  );\n}\n\nfunction parsePoints(coordinate: Coordinate, element: Element): { x: number; y: number }[] {\n  // @ts-ignore\n  return map(element.getModel().points, (point) => coordinate.convertPoint(point));\n}\n\nfunction renderArrowTag(config: TagRenderConfig, elemPrev: Element, elemNext: Element): void {\n  const { view, geometry, group, options, horizontal } = config;\n  const { offset, size, arrow } = options;\n  const coordinate = view.getCoordinate();\n  const pointPrev = parsePoints(coordinate, elemPrev)[horizontal ? 3 : 0];\n  const pointNext = parsePoints(coordinate, elemNext)[horizontal ? 0 : 3];\n  const totalHeight = pointNext.y - pointPrev.y;\n  const totalWidth = pointNext.x - pointPrev.x;\n\n  if (typeof arrow === 'boolean') {\n    return;\n  }\n  const { headSize } = arrow;\n  let spacing = options.spacing;\n  let points;\n\n  if (horizontal) {\n    if ((totalWidth - headSize) / 2 < spacing) {\n      // 当柱间距不足容纳箭头尖与间隔时，画三角并挤占间隔\n      spacing = Math.max(1, (totalWidth - headSize) / 2);\n      points = [\n        [pointPrev.x + spacing, pointPrev.y - offset],\n        [pointPrev.x + spacing, pointPrev.y - offset - size],\n        [pointNext.x - spacing, pointNext.y - offset - size / 2],\n      ];\n    } else {\n      // 当柱间距足够时，画完整图形并留出间隔。\n      points = [\n        [pointPrev.x + spacing, pointPrev.y - offset],\n        [pointPrev.x + spacing, pointPrev.y - offset - size],\n        [pointNext.x - spacing - headSize, pointNext.y - offset - size],\n        [pointNext.x - spacing, pointNext.y - offset - size / 2],\n        [pointNext.x - spacing - headSize, pointNext.y - offset],\n      ];\n    }\n  } else {\n    if ((totalHeight - headSize) / 2 < spacing) {\n      // 当柱间距不足容纳箭头尖与间隔时，画三角并挤占间隔\n      spacing = Math.max(1, (totalHeight - headSize) / 2);\n      points = [\n        [pointPrev.x + offset, pointPrev.y + spacing],\n        [pointPrev.x + offset + size, pointPrev.y + spacing],\n        [pointNext.x + offset + size / 2, pointNext.y - spacing],\n      ];\n    } else {\n      // 当柱间距足够时，画完整图形并留出间隔。\n      points = [\n        [pointPrev.x + offset, pointPrev.y + spacing],\n        [pointPrev.x + offset + size, pointPrev.y + spacing],\n        [pointNext.x + offset + size, pointNext.y - spacing - headSize],\n        [pointNext.x + offset + size / 2, pointNext.y - spacing],\n        [pointNext.x + offset, pointNext.y - spacing - headSize],\n      ];\n    }\n  }\n\n  group.addShape('polygon', {\n    id: `${view.id}-conversion-tag-arrow-${geometry.getElementId(elemPrev.getModel().mappingData)}`,\n    name: 'conversion-tag-arrow',\n    origin: {\n      element: elemPrev,\n      nextElement: elemNext,\n    },\n    attrs: {\n      ...(arrow.style || {}),\n      points,\n    },\n  });\n}\n\nfunction renderTextTag(config: TagRenderConfig, elemPrev: Element, elemNext: Element): void {\n  const { view, geometry, group, options, field, horizontal } = config;\n  const { offset, size } = options;\n  if (typeof options.text === 'boolean') {\n    return;\n  }\n  const coordinate = view.getCoordinate();\n  const text = options.text?.formatter && options.text?.formatter(elemPrev.getData()[field], elemNext.getData()[field]);\n\n  const pointPrev = parsePoints(coordinate, elemPrev)[horizontal ? 3 : 0];\n  const pointNext = parsePoints(coordinate, elemNext)[horizontal ? 0 : 3];\n\n  const textShape = group.addShape('text', {\n    id: `${view.id}-conversion-tag-text-${geometry.getElementId(elemPrev.getModel().mappingData)}`,\n    name: 'conversion-tag-text',\n    origin: {\n      element: elemPrev,\n      nextElement: elemNext,\n    },\n    attrs: {\n      ...(options.text?.style || {}),\n      text,\n      x: horizontal ? (pointPrev.x + pointNext.x) / 2 : pointPrev.x + offset + size / 2,\n      y: horizontal ? pointPrev.y - offset - size / 2 : (pointPrev.y + pointNext.y) / 2,\n    },\n  });\n\n  if (horizontal) {\n    const totalWidth = pointNext.x - pointPrev.x;\n    const { width: textWidth } = textShape.getBBox();\n    if (textWidth > totalWidth) {\n      const cWidth = textWidth / text.length;\n      const cEnd = Math.max(1, Math.ceil(totalWidth / cWidth) - 1);\n      const textAdjusted = `${text.slice(0, cEnd)}...`;\n      textShape.attr('text', textAdjusted);\n    }\n  }\n}\n\nfunction renderTag(options: TagRenderConfig, elemPrev: Element, elemNext: Element): void {\n  renderArrowTag(options, elemPrev, elemNext);\n  renderTextTag(options, elemPrev, elemNext);\n}\n\n/**\n * 返回支持转化率组件的 adaptor，适用于柱形图/条形图\n * @param field 用户转化率计算的字段\n * @param horizontal 是否水平方向的转化率\n * @param disabled 是否禁用\n */\nexport function conversionTag<O extends OptionWithConversionTag & Options>(\n  field: string,\n  horizontal = true,\n  disabled = false\n) {\n  return function (params: Params<O>): Params<O> {\n    const { options, chart } = params;\n    const { conversionTag, theme } = options;\n\n    if (conversionTag && !disabled) {\n      // 有转化率组件时，柱子宽度占比自动为 1/3\n      chart.theme(\n        deepAssign({}, isObject(theme) ? theme : getTheme(theme), {\n          columnWidthRatio: 1 / 3,\n        })\n      );\n      // 使用  shape annotation 绘制转化率组件\n      chart.annotation().shape({\n        render: (container, view) => {\n          const group = container.addGroup({\n            id: `${chart.id}-conversion-tag-group`,\n            name: 'conversion-tag-group',\n          });\n          const interval = find(chart.geometries, (geom: Geometry) => geom.type === 'interval');\n          const config: TagRenderConfig = {\n            view,\n            geometry: interval,\n            group,\n            field,\n            horizontal,\n            options: getConversionTagOptionsWithDefaults(conversionTag, horizontal),\n          };\n          const elements = horizontal ? interval.elements : interval.elements.slice().reverse();\n          each(elements, (elem: Element, idx: number) => {\n            if (idx > 0) {\n              renderTag(config, elements[idx - 1], elem);\n            }\n          });\n        },\n      });\n    }\n\n    return params;\n  };\n}\n"]}