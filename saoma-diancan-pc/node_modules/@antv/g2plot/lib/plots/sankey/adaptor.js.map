{"version":3,"file":"adaptor.js","sourceRoot":"","sources":["../../../src/plots/sankey/adaptor.ts"],"names":[],"mappings":";;;;AAAA,mCAAkC;AAClC,+CAA0D;AAE1D,qCAA+C;AAC/C,uDAAyD;AACzD,mCAAgD;AAEhD,uCAAyF;AAEzF;;;GAGG;AACH,SAAS,cAAc,CAAC,MAA6B;IAC3C,IAAA,OAAO,GAAK,MAAM,QAAX,CAAY;IACnB,IAAA,KAAmB,OAAO,UAAZ,EAAd,SAAS,mBAAG,EAAE,KAAA,CAAa;IAEnC,OAAO,kBAAU,CACf,EAAE,EACF;QACE,OAAO,EAAE;YACP,OAAO,EAAE;gBACP,MAAM,EAAE,WAAI,yBAAE,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,GAAK,SAAS,EAAE;aAC5E;YACD,KAAK,EAAE;gBACL,MAAM,EAAE,WAAI,yBAAE,GAAG,EAAE,MAAM,GAAK,SAAS,EAAE;aAC1C;SACF;KACF,EACD,MAAM,CACP,CAAC;AACJ,CAAC;AAED;;;GAGG;AACH,SAAS,QAAQ,CAAC,MAA6B;IACrC,IAAA,KAAK,GAAc,MAAM,MAApB,EAAE,OAAO,GAAK,MAAM,QAAX,CAAY;IAC1B,IAAA,KAAK,GAAiE,OAAO,MAAxE,EAAE,SAAS,GAAsD,OAAO,UAA7D,EAAE,SAAS,GAA2C,OAAO,UAAlD,EAAE,KAAK,GAAoC,OAAO,MAA3C,EAAE,OAAO,GAA2B,OAAO,QAAlC,EAAE,SAAS,GAAgB,OAAO,UAAvB,EAAE,SAAS,GAAK,OAAO,UAAZ,CAAa;IAEtF,4BAA4B;IAC5B,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IACpB,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;IACvB,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAClB,uBAAuB;IACvB,KAAK,CAAC,UAAU,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;IAEhC,qBAAqB;IACrB,aAAa;IACP,IAAA,KAAmB,6BAAoB,CAAC,OAAO,EAAE,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,MAAM,CAAC,EAAzE,KAAK,WAAA,EAAE,KAAK,WAA6D,CAAC;IAElF,YAAY;IACZ,IAAM,QAAQ,GAAG,KAAK,CAAC,UAAU,CAAC,EAAE,EAAE,EAAE,wBAAa,EAAE,CAAC,CAAC;IACzD,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAErB,iBAAI,CAAC;QACH,KAAK,EAAE,QAAQ;QACf,aAAa;QACb,OAAO,EAAE;YACP,MAAM,EAAE,kBAAO;YACf,MAAM,EAAE,kBAAO;YACf,WAAW,EAAE,sBAAW;YACxB,IAAI,EAAE;gBACJ,KAAK,OAAA;gBACL,KAAK,EAAE,SAAS;gBAChB,KAAK,EAAE,KAAK;aACb;YACD,OAAO,SAAA;YACP,KAAK,EAAE,SAAS;SACjB;KACF,CAAC,CAAC;IAEH,IAAM,QAAQ,GAAG,KAAK,CAAC,UAAU,CAAC,EAAE,EAAE,EAAE,wBAAa,EAAE,CAAC,CAAC;IACzD,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAErB,oBAAO,CAAC;QACN,KAAK,EAAE,QAAQ;QACf,OAAO,EAAE;YACP,MAAM,EAAE,kBAAO;YACf,MAAM,EAAE,kBAAO;YACf,WAAW,EAAE,sBAAW;YACxB,OAAO,EAAE;gBACP,KAAK,OAAA;gBACL,KAAK,EAAE,SAAS;aACjB;YACD,KAAK,OAAA;YACL,OAAO,SAAA;YACP,KAAK,EAAE,SAAS;SACjB;KACF,CAAC,CAAC;IAEH,KAAK,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC;IAEpC,QAAQ;IACR,KAAK,CAAC,KAAK,CAAC;QACV,CAAC,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE;QACvE,CAAC,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE;QACvE,IAAI,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,KAAK,EAAE;KACrC,CAAC,CAAC;IAEH,OAAO,MAAM,CAAC;AAChB,CAAC;AAED;;;GAGG;AACH,SAAgB,SAAS,CAAC,MAA6B;IAC7C,IAAA,KAAK,GAAc,MAAM,MAApB,EAAE,OAAO,GAAK,MAAM,QAAX,CAAY;IAC1B,IAAA,SAAS,GAAK,OAAO,UAAZ,CAAa;IAE9B,mBAAmB;IACnB,IAAI,OAAO,SAAS,KAAK,SAAS,EAAE;QAClC,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;KAC1B;SAAM;QACL,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;KACrB;IAED,IAAM,UAAU,0BAAO,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,UAAU,EAAK,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC;IAEhF,sCAAsC;IACtC,UAAU,CAAC,OAAO,CAAC,UAAC,CAAC;QACnB,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;IACvB,CAAC,CAAC,CAAC;IAEH,OAAO,MAAM,CAAC;AAChB,CAAC;AAnBD,8BAmBC;AAED;;;GAGG;AACH,SAAgB,aAAa,CAAC,MAA6B;IACjD,IAAA,KAAK,GAAc,MAAM,MAApB,EAAE,OAAO,GAAK,MAAM,QAAX,CAAY;IAC1B,IAAA,aAAa,GAAK,OAAO,cAAZ,CAAa;IAElC,IAAM,gBAAgB,GAAG,uBAAuB,CAAC;IAEjD,IAAI,aAAa,EAAE;QACjB,KAAK,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC;KACrC;SAAM;QACL,KAAK,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,CAAC;KAC3C;IAED,OAAO,MAAM,CAAC;AAChB,CAAC;AAbD,sCAaC;AAED;;;;GAIG;AACH,SAAgB,OAAO,CAAC,MAA6B;IACnD,0BAA0B;IAC1B,OAAO,YAAI,CACT,cAAc,EACd,QAAQ,EACR,oBAAW,EACX,aAAa,EACb,SAAS,EACT,cAAK;IACL,uBAAuB;KACxB,CAAC,MAAM,CAAC,CAAC;AACZ,CAAC;AAXD,0BAWC","sourcesContent":["import { uniq } from '@antv/util';\nimport { interaction, theme } from '../../adaptor/common';\nimport { Params } from '../../core/adaptor';\nimport { deepAssign, flow } from '../../utils';\nimport { polygon, edge } from '../../adaptor/geometries';\nimport { transformToViewsData } from './helper';\nimport { SankeyOptions } from './types';\nimport { X_FIELD, Y_FIELD, COLOR_FIELD, EDGES_VIEW_ID, NODES_VIEW_ID } from './constant';\n\n/**\n * 默认配置项 处理\n * @param params\n */\nfunction defaultOptions(params: Params<SankeyOptions>): Params<SankeyOptions> {\n  const { options } = params;\n  const { rawFields = [] } = options;\n\n  return deepAssign(\n    {},\n    {\n      options: {\n        tooltip: {\n          fields: uniq(['name', 'source', 'target', 'value', 'isNode', ...rawFields]),\n        },\n        label: {\n          fields: uniq(['x', 'name', ...rawFields]),\n        },\n      },\n    },\n    params\n  );\n}\n\n/**\n * geometry 处理\n * @param params\n */\nfunction geometry(params: Params<SankeyOptions>): Params<SankeyOptions> {\n  const { chart, options } = params;\n  const { color, nodeStyle, edgeStyle, label, tooltip, nodeState, edgeState } = options;\n\n  // 1. 组件，优先设置，因为子 view 会继承配置\n  chart.legend(false);\n  chart.tooltip(tooltip);\n  chart.axis(false);\n  // y 镜像一下，防止图形顺序和数据顺序反了\n  chart.coordinate().reflect('y');\n\n  // 2. node edge views\n  // @ts-ignore\n  const { nodes, edges } = transformToViewsData(options, chart.width, chart.height);\n\n  // edge view\n  const edgeView = chart.createView({ id: EDGES_VIEW_ID });\n  edgeView.data(edges);\n\n  edge({\n    chart: edgeView,\n    // @ts-ignore\n    options: {\n      xField: X_FIELD,\n      yField: Y_FIELD,\n      seriesField: COLOR_FIELD,\n      edge: {\n        color,\n        style: edgeStyle,\n        shape: 'arc',\n      },\n      tooltip,\n      state: edgeState,\n    },\n  });\n\n  const nodeView = chart.createView({ id: NODES_VIEW_ID });\n  nodeView.data(nodes);\n\n  polygon({\n    chart: nodeView,\n    options: {\n      xField: X_FIELD,\n      yField: Y_FIELD,\n      seriesField: COLOR_FIELD,\n      polygon: {\n        color,\n        style: nodeStyle,\n      },\n      label,\n      tooltip,\n      state: nodeState,\n    },\n  });\n\n  chart.interaction('element-active');\n\n  // scale\n  chart.scale({\n    x: { sync: true, nice: true, min: 0, max: 1, minLimit: 0, maxLimit: 1 },\n    y: { sync: true, nice: true, min: 0, max: 1, minLimit: 0, maxLimit: 1 },\n    name: { sync: 'color', type: 'cat' },\n  });\n\n  return params;\n}\n\n/**\n * 动画\n * @param params\n */\nexport function animation(params: Params<SankeyOptions>): Params<SankeyOptions> {\n  const { chart, options } = params;\n  const { animation } = options;\n\n  // 同时设置整个 view 动画选项\n  if (typeof animation === 'boolean') {\n    chart.animate(animation);\n  } else {\n    chart.animate(true);\n  }\n\n  const geometries = [...chart.views[0].geometries, ...chart.views[1].geometries];\n\n  // 所有的 Geometry 都使用同一动画（各个图形如有区别，自行覆盖）\n  geometries.forEach((g) => {\n    g.animate(animation);\n  });\n\n  return params;\n}\n\n/**\n * 节点拖动\n * @param params\n */\nexport function nodeDraggable(params: Params<SankeyOptions>): Params<SankeyOptions> {\n  const { chart, options } = params;\n  const { nodeDraggable } = options;\n\n  const DRAG_INTERACTION = 'sankey-node-draggable';\n\n  if (nodeDraggable) {\n    chart.interaction(DRAG_INTERACTION);\n  } else {\n    chart.removeInteraction(DRAG_INTERACTION);\n  }\n\n  return params;\n}\n\n/**\n * 图适配器\n * @param chart\n * @param options\n */\nexport function adaptor(params: Params<SankeyOptions>) {\n  // flow 的方式处理所有的配置到 G2 API\n  return flow(\n    defaultOptions,\n    geometry,\n    interaction,\n    nodeDraggable,\n    animation,\n    theme\n    // ... 其他的 adaptor flow\n  )(params);\n}\n"]}