{"version":3,"file":"node-drag.js","sourceRoot":"","sources":["../../../../../src/plots/sankey/interactions/actions/node-drag.ts"],"names":[],"mappings":"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","sourcesContent":["import { Action, Element } from '@antv/g2';\nimport { get } from '@antv/util';\nimport { Datum, Point } from '../../../../types';\nimport { findViewById } from '../../../../utils';\nimport { EDGES_VIEW_ID, NODES_VIEW_ID } from '../../constant';\n\nexport class SankeyNodeDragAction extends Action {\n  /**\n   * 是否在拖拽中的标记\n   */\n  private isDragging = false;\n\n  /**\n   * 鼠标上一次的位置的坐标点\n   */\n  private prevPoint: Point;\n  /**\n   * 之前的节点动画配置\n   */\n  private prevNodeAnimateCfg: any;\n  /**\n   * 之前的边动画配置\n   */\n  private prevEdgeAnimateCfg: any;\n  /**\n   * 当前拖拽的 element 索引\n   */\n  private currentElementIdx: number;\n\n  /**\n   * 当前操作的是否是 element\n   */\n  private isNodeElement() {\n    const shape = get(this.context, 'event.target');\n    if (shape) {\n      const element = shape.get('element');\n      return element && element.getModel().data.isNode;\n    }\n    return false;\n  }\n\n  private getNodeView() {\n    return findViewById(this.context.view, NODES_VIEW_ID);\n  }\n\n  private getEdgeView() {\n    return findViewById(this.context.view, EDGES_VIEW_ID);\n  }\n\n  /**\n   * 获取当前操作的 index\n   * @param element\n   */\n  private getCurrentDatumIdx(element: Element) {\n    return this.getNodeView().geometries[0].elements.indexOf(element);\n  }\n\n  /**\n   * 点击下去，开始\n   */\n  public start() {\n    // 记录开始了的状态\n    if (this.isNodeElement()) {\n      this.prevPoint = {\n        x: get(this.context, 'event.x'),\n        y: get(this.context, 'event.y'),\n      };\n\n      const element = this.context.event.target.get('element');\n      const idx = this.getCurrentDatumIdx(element);\n\n      if (idx === -1) {\n        return;\n      }\n\n      this.currentElementIdx = idx;\n      this.context.isDragging = true;\n      this.isDragging = true;\n\n      // 关闭动画并暂存配置\n      this.prevNodeAnimateCfg = this.getNodeView().getOptions().animate;\n      this.prevEdgeAnimateCfg = this.getEdgeView().getOptions().animate;\n      this.getNodeView().animate(false);\n      this.getEdgeView().animate(false);\n    }\n  }\n\n  /**\n   * 移动过程中，平移\n   */\n  public translate() {\n    if (this.isDragging) {\n      const chart = this.context.view;\n\n      const currentPoint = {\n        x: get(this.context, 'event.x'),\n        y: get(this.context, 'event.y'),\n      };\n\n      const x = currentPoint.x - this.prevPoint.x;\n      const y = currentPoint.y - this.prevPoint.y;\n\n      const nodeView = this.getNodeView();\n      const element = nodeView.geometries[0].elements[this.currentElementIdx];\n\n      // 修改数据\n      if (element && element.getModel()) {\n        const prevDatum: Datum = element.getModel().data;\n        const data = nodeView.getOptions().data;\n        const coordinate = nodeView.getCoordinate();\n\n        const datumGap = {\n          x: x / coordinate.getWidth(),\n          y: y / coordinate.getHeight(),\n        };\n\n        const nextDatum = {\n          ...prevDatum,\n          x: prevDatum.x.map((x: number) => (x += datumGap.x)),\n          y: prevDatum.y.map((y: number) => (y += datumGap.y)),\n        };\n        // 处理一下在 [0, 1] 范围\n\n        // 1. 更新 node 数据\n        const newData = [...data];\n        newData[this.currentElementIdx] = nextDatum;\n        nodeView.data(newData);\n\n        // 2. 更新 edge 数据\n        const name = prevDatum.name;\n        const edgeView = this.getEdgeView();\n        const edgeData = edgeView.getOptions().data;\n\n        edgeData.forEach((datum) => {\n          // 2.1 以该 node 为 source 的边，修改 [x0, x1, x2, x3] 中的 x0, x1\n          if (datum.source === name) {\n            datum.x[0] += datumGap.x;\n            datum.x[1] += datumGap.x;\n            datum.y[0] += datumGap.y;\n            datum.y[1] += datumGap.y;\n          }\n\n          // 2.2 以该 node 为 target 的边，修改 [x0, x1, x2, x3] 中的 x2, x3\n          if (datum.target === name) {\n            datum.x[2] += datumGap.x;\n            datum.x[3] += datumGap.x;\n            datum.y[2] += datumGap.y;\n            datum.y[3] += datumGap.y;\n          }\n        });\n        edgeView.data(edgeData);\n\n        // 3. 更新最新位置\n        this.prevPoint = currentPoint;\n\n        // node edge 都改变了，所以要从底层 render\n        chart.render(true);\n      }\n    }\n  }\n\n  /**\n   * 结论，清除状态\n   */\n  public end() {\n    this.isDragging = false;\n    this.context.isDragging = false;\n    this.prevPoint = null;\n    this.currentElementIdx = null;\n\n    // 还原动画\n    this.getNodeView().animate(this.prevNodeAnimateCfg);\n    this.getEdgeView().animate(this.prevEdgeAnimateCfg);\n  }\n}\n"]}