{"version":3,"file":"meter-gauge.js","sourceRoot":"","sources":["../../../../src/plots/gauge/shapes/meter-gauge.ts"],"names":[],"mappings":";;AAAA,+BAAsD;AAOtD,cAAc;AACd,kBAAa,CAAC,UAAU,EAAE,aAAa,EAAE;IACvC,IAAI,EAAJ,UAAK,GAAa,EAAE,SAAS;QAC3B,qBAAqB;QACb,IAAA,KAAe,GAAG,CAAC,UAAU,MAAnB,EAAV,KAAK,mBAAG,EAAE,KAAA,CAAoB;QAC9B,IAAA,KAAsC,KAAK,MAA3B,EAAT,IAAI,mBAAG,EAAE,KAAA,EAAE,KAAoB,KAAK,UAAV,EAAf,SAAS,mBAAG,GAAG,KAAA,CAAW;QAEpD,IAAM,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC;QACpE,IAAI,QAAQ,GAAG,KAAK,GAAG,IAAI,CAAC;QAC5B,IAAI,GAAG,GAAG,CAAC,CAAC;QAEZ;;;;WAIG;QACH,IAAI,SAAS,GAAG,CAAC,IAAI,SAAS,IAAI,CAAC,EAAE;YACnC,QAAQ,GAAG,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,GAAG,SAAS,CAAC,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;YACvE,GAAG,GAAG,CAAC,QAAQ,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,SAAS,CAAC;SAChD;QAED,IAAM,KAAK,GAAG,SAAS,CAAC,QAAQ,EAAE,CAAC;QACnC,SAAS;QACT,IAAI,GAAG,GAAG,CAAC,EAAE;YACX,IAAM,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,SAAS,EAAE,CAAC;YAC3C,IAAM,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,SAAS,EAAE,CAAC;YACrC,IAAA,KAA2B,SAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,IAAI,CAAC,UAAU,CAAC,EAA5D,UAAU,gBAAA,EAAE,QAAQ,cAAwC,CAAC;YACrE,KAAK,IAAI,CAAC,GAAG,UAAU,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;gBACrE,IAAM,KAAK,GAAG,CAAC,GAAG,CAAC,CAAC;gBACpB,IAAI,KAAK,EAAE;oBACT,IAAM,IAAI,GAAG,SAAI,CAAC,aAAa,CAC7B,MAAM,CAAC,CAAC,EACR,MAAM,CAAC,CAAC,EACR,MAAM,EACN,CAAC,EACD,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,EAAE,QAAQ,CAAC,EAC3B,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CACrC,CAAC;oBACF,KAAK,CAAC,QAAQ,CAAC,MAAM,EAAE;wBACrB,IAAI,EAAE,kBAAkB;wBACxB,KAAK,EAAE;4BACL,IAAI,MAAA;4BACJ,IAAI,EAAE,GAAG,CAAC,KAAK;4BACf,MAAM,EAAE,GAAG,CAAC,KAAK;4BACjB,SAAS,EAAE,GAAG;yBACf;wBACD,eAAe;wBACf,OAAO,EAAE,KAAK;qBACf,CAAC,CAAC;iBACJ;gBACD,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,QAAQ,CAAC;aAC7B;SACF;QAED,OAAO,KAAK,CAAC;IACf,CAAC;CACF,CAAC,CAAC","sourcesContent":["import { registerShape, Types, Util } from '@antv/g2';\nimport { GaugeCustomInfo } from '../types';\n\ntype ShapeCfg = Omit<Types.ShapeInfo, 'customInfo'> & {\n  customInfo: GaugeCustomInfo;\n};\n\n// 自定义Shape 部分\nregisterShape('interval', 'meter-gauge', {\n  draw(cfg: ShapeCfg, container) {\n    // 使用 customInfo 传递参数\n    const { meter = {} } = cfg.customInfo;\n    const { steps: STEP = 50, stepRatio = 0.5 } = meter;\n\n    const total = this.coordinate.endAngle - this.coordinate.startAngle;\n    let interval = total / STEP;\n    let gap = 0;\n\n    /**\n     * stepRatio 取值范围: (0, 1]\n     * 1: interval : gap = stepRatio : (1 - stepRatio)\n     * 2: interval * STEP + stepRatio * (STEP - 1) = total\n     */\n    if (stepRatio > 0 && stepRatio <= 1) {\n      interval = total / (((1 - stepRatio) / stepRatio) * (STEP - 1) + STEP);\n      gap = (interval * (1 - stepRatio)) / stepRatio;\n    }\n\n    const group = container.addGroup();\n    // 绘制 gap\n    if (gap > 0) {\n      const center = this.coordinate.getCenter();\n      const radius = this.coordinate.getRadius();\n      const { startAngle, endAngle } = Util.getAngle(cfg, this.coordinate);\n      for (let i = startAngle, j = 0; i < endAngle && j < 2 * STEP - 1; j++) {\n        const drawn = j % 2;\n        if (drawn) {\n          const path = Util.getSectorPath(\n            center.x,\n            center.y,\n            radius,\n            i,\n            Math.min(i + gap, endAngle),\n            radius * this.coordinate.innerRadius\n          );\n          group.addShape('path', {\n            name: 'meter-gauge-mask',\n            attrs: {\n              path,\n              fill: cfg.color,\n              stroke: cfg.color,\n              lineWidth: 0.5,\n            },\n            // mask 不需要捕捉事件\n            capture: false,\n          });\n        }\n        i += drawn ? gap : interval;\n      }\n    }\n\n    return group;\n  },\n});\n"]}