{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../src/plots/word-cloud/types.ts"],"names":[],"mappings":"","sourcesContent":["import { Datum, Options, ShapeStyle } from '../../types';\n\ntype FontWeight = ShapeStyle['fontWeight'];\n\n/** 一个文本信息，wordCloud 内部 */\nexport interface Word {\n  /** 文本内容 */\n  text: string;\n  /** 该文本所占权重 */\n  value: number;\n  /** 用于指定颜色字段 */\n  color: string | number;\n  /** 原始数据 */\n  datum: Datum;\n}\n\nexport type Tag = Word & {\n  /** 字体 */\n  font?: string;\n  /** 字体样式 */\n  style?: ShapeStyle['fontStyle'];\n  /** 文本粗细 */\n  weight?: FontWeight;\n  /** 旋转角度 */\n  rotate?: number;\n  /** 字体大小 */\n  size?: number;\n  /** 一个单词所占的盒子的内边距，值越大单词之间的间隔越大 */\n  padding?: number;\n  /** 是否包含文本 */\n  hasText?: boolean;\n  /** 单词所占盒子的宽度 */\n  width?: number;\n  /** 单词所占盒子的高度 */\n  height?: number;\n  /** x 轴坐标 */\n  x?: number;\n  /** y 轴坐标 */\n  y?: number;\n};\n\n/** 词云字体样式 */\nexport interface WordStyle {\n  /** 词云的字体, 当为函数时，其参数是一个经过处理之后的数据元素的值 */\n  readonly fontFamily?: string | ((word: Word, index?: number, words?: Word[]) => string);\n  /** 设置字体的粗细, 当为函数时，其参数是一个经过处理之后的数据元素的值 */\n  readonly fontWeight?: FontWeight | ((word: Word, index?: number, words?: Word[]) => FontWeight);\n  /**\n   * 每个单词所占的盒子的内边距，默认为 1。 越大单词之间的间隔越大。\n   * 当为函数时，其参数是一个经过处理之后的数据元素的值\n   */\n  readonly padding?: number | ((word: Word, index?: number, words?: Word[]) => number);\n  /** 字体的大小范围,当为函数时，其参数是一个经过处理之后的数据元素的值 */\n  readonly fontSize?: [number, number] | number | ((word: Word, index?: number, words?: Word[]) => number);\n  /**\n   * 旋转的最小角度和最大角度 默认 [0, 90]。\n   *\n   * 注意：如果值是 number 或者 function ，则\n   * `rotationSteps` 选项将失效。\n   */\n  readonly rotation?: [number, number] | number | ((word: Word, index?: number, words?: Word[]) => number);\n  /**\n   * 旋转实际的步数,越大可能旋转角度越小, 默认是 2。\n   *\n   * 例如：如果 `rotation` 的值是 [0, 90]，`rotationSteps` 的值是 3，\n   * 则最终可能旋转的角度有三种，分别是 0 度、45度和 90 度。\n   */\n  readonly rotationSteps?: number;\n}\n\nexport interface WordCloudOptions extends Options {\n  /** 词条内容字段 */\n  readonly wordField: string;\n  /** 词条权重字段 */\n  readonly weightField: string;\n  /** 根据该字段进行颜色映射 */\n  readonly colorField?: string;\n  /** 遮罩图片实例，可以是图片 URL 或者 base64 */\n  readonly imageMask?: HTMLImageElement | string;\n  /** 最大执行时间 */\n  readonly timeInterval?: number;\n  /**\n   * 自定义所使用的随机函数，其值可以是一个 [0, 1) 区间中的值，\n   * 也可以是一个返回该值的函数，当该值是一个固定的值时，每次渲染\n   * 相同数据的词云图时，其对应的每个单词的布局坐标一致。\n   *\n   * 默认使用的是浏览器内置的 Math.random，也就是每次渲染，单词的位置都不一样。\n   */\n  readonly random?: number | (() => number);\n  /**\n   * 1，当设置为 `archimedean` 时，整个词云图接近于`椭圆`的形状。\n   * 2，当设置为 `rectangular` 时，整个词云图接近于`矩形`的形状。\n   * 默认是 `archimedean`。\n   */\n  readonly spiral?: 'archimedean' | 'rectangular';\n  /**\n   * 自定义每个词语的坐标。\n   * 返回值必须包含 x 和 y 属性，其余的可选。也可以在 `wordStyle` 中的\n   * 选项中设置。\n   */\n  readonly placementStrategy?: (word: Word, index?: number, words?: Word[]) => Partial<Tag> & { x: number; y: number };\n  readonly wordStyle?: WordStyle;\n}\n"]}