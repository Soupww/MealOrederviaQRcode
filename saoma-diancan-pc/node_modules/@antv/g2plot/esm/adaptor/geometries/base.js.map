{"version":3,"file":"base.js","sourceRoot":"","sources":["../../../src/adaptor/geometries/base.ts"],"names":[],"mappings":"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","sourcesContent":["import { uniq, isFunction, isObject, isString, isNumber, isEmpty } from '@antv/util';\nimport { Params } from '../../core/adaptor';\nimport { ColorAttr, ShapeAttr, SizeAttr, StyleAttr, TooltipAttr, Options, Datum } from '../../types';\nimport { Label } from '../../types/label';\nimport { State } from '../../types/state';\nimport { transformLabel } from '../../utils';\n\n/**\n * 图形映射属性，按照优先级来的\n */\nexport type MappingOptions = {\n  /** color 映射 */\n  readonly color?: ColorAttr;\n  /** shape 映射 */\n  readonly shape?: ShapeAttr;\n  /** 大小映射, 提供回调的方式 */\n  readonly size?: SizeAttr;\n  /** 样式映射 */\n  readonly style?: StyleAttr;\n  /** tooltip 映射 */\n  readonly tooltip?: TooltipAttr;\n};\n\n/**\n * 一个图形映射的逻辑，纯粹的图形语法\n * // TODO 后续需要处理 adjust 的配置，然后通过 field 信息。比如 styleField，labelField 等一定是一个数组形式\n */\nexport type Geometry = {\n  /** geometry 类型, 'line' | 'interval' | 'point' | 'area' | 'polygon' */\n  readonly type?: string;\n  /** x 轴字段 */\n  readonly xField?: string;\n  /** y 轴字段 */\n  readonly yField?: string;\n  /** 分组字段 */\n  readonly colorField?: string;\n  /** shape 的映射字段 */\n  readonly shapeField?: string;\n  /** size 映射字段 */\n  readonly sizeField?: string;\n  /** style 的映射字段 */\n  readonly styleField?: string;\n  /** tooltip 的映射字段 */\n  readonly tooltipFields?: string[] | false;\n  /** 其他原始字段, 用于 mapping 回调参数 */\n  readonly rawFields?: string[];\n  /** 图形映射规则 */\n  readonly mapping?: MappingOptions;\n  /** label 映射通道，因为历史原因导致实现略有区别 */\n  readonly label?: Label;\n  /** 不同状态的样式 */\n  readonly state?: State;\n  /** geometry params */\n  readonly args?: any;\n};\n\n/**\n * geometry options\n */\nexport type GeometryOptions = Geometry & Partial<Options>;\n\n/**\n * 获得映射的字段列表\n * @param options\n * @param field\n */\nexport function getMappingField(\n  o: GeometryOptions,\n  field: 'color' | 'shape' | 'size' | 'style'\n): {\n  mappingFields: string[];\n  tileMappingField: string;\n} {\n  const { type, xField, yField, colorField, shapeField, sizeField, styleField, rawFields = [] } = o;\n\n  let fields = [];\n\n  // 因为 color 会影响到数据分组，以及最后的图形映射。所以导致 bar 图中的 widthRatio 设置不生效\n  // 所以对于 color 字段，仅仅保留 colorField 好了！ + rawFields\n  // shape, size 同理\n  if (field === 'color') {\n    fields = [colorField || xField, ...rawFields];\n  } else if (field === 'shape') {\n    fields = [shapeField || xField, ...rawFields];\n  } else if (field === 'size') {\n    fields = [sizeField || xField, ...rawFields];\n  } else {\n    fields = [xField, yField, colorField, shapeField, sizeField, styleField, ...rawFields];\n\n    // 一定能找到的！\n    const idx = ['x', 'y', 'color', 'shape', 'size', 'style'].indexOf(field);\n\n    const f = fields[idx];\n    // 删除当前字段\n    fields.splice(idx, 1);\n    // 插入到第一个\n    fields.unshift(f);\n  }\n\n  const mappingFields = uniq(fields.filter((f) => !!f));\n  /**\n   * 修复 line geometry 无拆分时 color 回调错误\n   * eg:\n   *   geometry.color(xField, ()=> '#f24')\n   */\n  const tileMappingField =\n    type === 'line' && [xField, yField].includes(mappingFields.join('*')) ? '' : mappingFields.join('*');\n  return {\n    mappingFields,\n    tileMappingField,\n  };\n}\n\n/**\n * 获得映射函数\n * @param mappingFields\n * @param func\n */\nexport function getMappingFunction(mappingFields: string[], func: (datum: Datum) => any) {\n  if (!func) return undefined;\n  // 返回函数\n  return (...args: any[]) => {\n    const params: Datum = {};\n\n    mappingFields.forEach((f: string, idx: number) => {\n      params[f] = args[idx];\n    });\n\n    // 删除 undefined\n    delete params['undefined'];\n\n    return func(params);\n  };\n}\n\n/**\n * 通用 geometry 的配置处理的 adaptor\n * @param params\n */\nexport function geometry<O extends GeometryOptions>(params: Params<O>): Params<O> {\n  const { chart, options } = params;\n  const { type, args, mapping, xField, yField, colorField, shapeField, sizeField, tooltipFields, label, state } =\n    options;\n\n  // 如果没有 mapping 信息，那么直接返回\n  if (!mapping) {\n    return params;\n  }\n\n  const { color, shape, size, style, tooltip } = mapping;\n\n  // 创建 geometry\n  const geometry = chart[type](args).position(`${xField}*${yField}`);\n\n  /**\n   * color 的几种情况\n   * g.color('red');\n   * g.color('color', ['red', 'blue']);\n   * g.color('x', (x, y) => 'red');\n   * g.color('color', (color, x, y) => 'red');\n   */\n  if (isString(color)) {\n    colorField ? geometry.color(colorField, color) : geometry.color(color);\n  } else if (isFunction(color)) {\n    const { mappingFields, tileMappingField } = getMappingField(options, 'color');\n    geometry.color(tileMappingField, getMappingFunction(mappingFields, color));\n  } else {\n    colorField && geometry.color(colorField, color);\n  }\n\n  /**\n   * shape 的几种情况\n   * g.shape('rect');\n   * g.shape('shape', ['rect', 'circle']);\n   * g.shape('x*y', (x, y) => 'rect');\n   * g.shape('shape*x*y', (shape, x, y) => 'rect');\n   */\n  if (isString(shape)) {\n    shapeField ? geometry.shape(shapeField, [shape]) : geometry.shape(shape); // [shape] 需要在 G2 做掉\n  } else if (isFunction(shape)) {\n    const { mappingFields, tileMappingField } = getMappingField(options, 'shape');\n    geometry.shape(tileMappingField, getMappingFunction(mappingFields, shape));\n  } else {\n    shapeField && geometry.shape(shapeField, shape);\n  }\n\n  /**\n   * size 的几种情况\n   * g.size(10);\n   * g.size('size', [10, 20]);\n   * g.size('x*y', (x, y) => 10);\n   * g.color('size*x*y', (size, x, y) => 1-);\n   */\n  if (isNumber(size)) {\n    sizeField ? geometry.size(sizeField, size) : geometry.size(size);\n  } else if (isFunction(size)) {\n    const { mappingFields, tileMappingField } = getMappingField(options, 'size');\n    geometry.size(tileMappingField, getMappingFunction(mappingFields, size));\n  } else {\n    sizeField && geometry.size(sizeField, size);\n  }\n\n  /**\n   * style 的几种情况\n   * g.style({ fill: 'red' });\n   * g.style('x*y*color', (x, y, color) => ({ fill: 'red' }));\n   */\n  if (isFunction(style)) {\n    const { mappingFields, tileMappingField } = getMappingField(options, 'style');\n    geometry.style(tileMappingField, getMappingFunction(mappingFields, style));\n  } else if (isObject(style)) {\n    geometry.style(style);\n  }\n\n  /**\n   * tooltip 的 API\n   * g.tooltip('x*y*color', (x, y, color) => ({ name, value }));\n   * g.tooltip(false);\n   */\n  if (tooltipFields === false) {\n    geometry.tooltip(false);\n  } else if (!isEmpty(tooltipFields)) {\n    geometry.tooltip(tooltipFields.join('*'), getMappingFunction(tooltipFields, tooltip));\n  }\n\n  /**\n   * label 的映射\n   */\n  if (label === false) {\n    geometry.label(false);\n  } else if (label) {\n    const { callback, fields, ...cfg } = label;\n    geometry.label({\n      fields: fields || [yField],\n      callback,\n      cfg: transformLabel(cfg),\n    });\n  }\n\n  /**\n   * state 状态样式\n   */\n  if (state) {\n    geometry.state(state);\n  }\n\n  // 防止因为 x y 字段做了通道映射，导致生成图例\n  [xField, yField]\n    .filter((f: string) => f !== colorField)\n    .forEach((f: string) => {\n      chart.legend(f, false);\n    });\n  return {\n    ...params,\n    // geometry adaptor 额外需要做的事情，就是将创建好的 geometry 返回到下一层 adaptor，防止通过 type 查询的时候容易误判\n    ext: { geometry },\n  };\n}\n"]}