{"version":3,"file":"line.js","sourceRoot":"","sources":["../../../src/adaptor/geometries/line.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,YAAY,CAAC;AAErC,OAAO,EAAE,iBAAiB,EAAE,MAAM,qBAAqB,CAAC;AACxD,OAAO,EAAE,UAAU,EAAE,MAAM,aAAa,CAAC;AACzC,OAAO,EAAmB,QAAQ,EAAkB,MAAM,QAAQ,CAAC;AAmBnE;;;GAGG;AACH,MAAM,UAAU,IAAI,CAAgC,MAAiB;IAC3D,IAAA,OAAO,GAAK,MAAM,QAAX,CAAY;IACnB,IAAA,IAAI,GAA2E,OAAO,KAAlF,EAAE,QAAQ,GAAiE,OAAO,SAAxE,EAAE,MAAM,GAAyD,OAAO,OAAhE,EAAE,MAAM,GAAiD,OAAO,OAAxD,EAAE,WAAW,GAAoC,OAAO,YAA3C,EAAE,MAAM,GAA4B,OAAO,OAAnC,EAAE,YAAY,GAAc,OAAO,aAArB,EAAE,OAAO,GAAK,OAAO,QAAZ,CAAa;IAEzF,IAAA,KAAwB,iBAAiB,CAAC,OAAO,EAAE,CAAC,MAAM,EAAE,MAAM,EAAE,WAAW,CAAC,CAAC,EAA/E,MAAM,YAAA,EAAE,SAAS,eAA8D,CAAC;IAExF,UAAU;IACV,OAAO,IAAI;QACT,CAAC,CAAC,QAAQ,CACN,UAAU,CAAC,EAAE,EAAE,MAAM,EAAE;YACrB,OAAO,EAAE;gBACP,IAAI,EAAE,MAAM;gBACZ,UAAU,EAAE,WAAW;gBACvB,aAAa,EAAE,MAAM;gBACrB,OAAO,EAAE,OAAO,CACd;oBACE,KAAK,EAAE,QAAQ,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC;oBAC/C,OAAO,EAAE,SAAS;iBACnB,EACD,IAAI,CACL;gBACD,IAAI,EAAE,EAAE,YAAY,cAAA,EAAE;aACvB;SACF,CAAC,CACH;QACH,CAAC,CAAC,MAAM,CAAC;AACb,CAAC","sourcesContent":["import { deepMix } from '@antv/util';\nimport { Params } from '../../core/adaptor';\nimport { getTooltipMapping } from '../../utils/tooltip';\nimport { deepAssign } from '../../utils';\nimport { GeometryOptions, geometry, MappingOptions } from './base';\n\nexport interface LineGeometryOptions extends GeometryOptions {\n  /** x 轴字段 */\n  readonly xField?: string;\n  /** y 轴字段 */\n  readonly yField?: string;\n  /** 分组字段 */\n  readonly seriesField?: string;\n  /** 是否平滑 */\n  readonly smooth?: boolean;\n  /** 是否连接空数据 */\n  readonly connectNulls?: boolean;\n  /** line 映射配置 */\n  readonly line?: MappingOptions;\n  /** 阶梯折线图类型 */\n  readonly stepType?: string;\n}\n\n/**\n * line 辅助点的配置处理\n * @param params\n */\nexport function line<O extends LineGeometryOptions>(params: Params<O>): Params<O> {\n  const { options } = params;\n  const { line, stepType, xField, yField, seriesField, smooth, connectNulls, tooltip } = options;\n\n  const { fields, formatter } = getTooltipMapping(tooltip, [xField, yField, seriesField]);\n\n  // 如果存在才处理\n  return line\n    ? geometry(\n        deepAssign({}, params, {\n          options: {\n            type: 'line',\n            colorField: seriesField,\n            tooltipFields: fields,\n            mapping: deepMix(\n              {\n                shape: stepType || (smooth ? 'smooth' : 'line'),\n                tooltip: formatter,\n              },\n              line\n            ),\n            args: { connectNulls },\n          },\n        })\n      )\n    : params;\n}\n"]}