{"version":3,"file":"geometry.js","sourceRoot":"","sources":["../../../../src/plots/dual-axes/util/geometry.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,IAAI,EAAE,MAAM,YAAY,CAAC;AAGlC,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE,MAAM,6BAA6B,CAAC;AAC1D,OAAO,EAAE,IAAI,EAAE,UAAU,EAAE,MAAM,gBAAgB,CAAC;AAClD,OAAO,EAAE,OAAO,IAAI,aAAa,EAAE,MAAM,sBAAsB,CAAC;AAEhE,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,UAAU,CAAC;AAE5C;;;GAGG;AACH,MAAM,UAAU,kBAAkB,CAChC,MAAiB;IAET,IAAA,OAAO,GAAY,MAAM,QAAlB,EAAE,KAAK,GAAK,MAAM,MAAX,CAAY;IAC1B,IAAA,cAAc,GAAK,OAAO,eAAZ,CAAa;IAC3B,IAAA,OAAO,GAA8C,cAAc,QAA5D,EAAE,KAAK,GAAuC,cAAc,MAArD,EAAE,WAAW,GAA0B,cAAc,YAAxC,EAAE,UAAU,GAAc,cAAc,WAA5B,EAAE,OAAO,GAAK,cAAc,QAAnB,CAAoB;IAE5E,IAAM,SAAS,GAAG,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;IACvC,IAAI,MAAM,CAAC,cAAc,CAAC,EAAE;QAC1B,MAAM;QACN,IAAI,CACF,UAAU,CAAC,EAAE,EAAE,MAAM,EAAE;YACrB,OAAO,iCACF,IAAI,CAAC,OAAO,EAAE,SAAS,CAAC,GACxB,cAAc,KACjB,IAAI,EAAE;oBACJ,KAAK,EAAE,cAAc,CAAC,KAAK;oBAC3B,KAAK,EAAE,cAAc,CAAC,SAAS;iBAChC,GACF;SACF,CAAC,CACH,CAAC;QACF,MAAM;QACN,KAAK,CACH,UAAU,CAAC,EAAE,EAAE,MAAM,EAAE;YACrB,OAAO,iCACF,IAAI,CAAC,OAAO,EAAE,SAAS,CAAC,GACxB,cAAc,KACjB,KAAK,EAAE,cAAc,CAAC,KAAK,eACzB,KAAK,OAAA,EACL,KAAK,EAAE,QAAQ,IACZ,cAAc,CAAC,KAAK,CACxB,GACF;SACF,CAAC,CACH,CAAC;QACF,SAAS;QACT,IAAM,QAAM,GAAG,EAAE,CAAC;QAClB,IAAI,OAAO,EAAE;YACX,QAAM,CAAC,IAAI,CAAC;gBACV,IAAI,EAAE,OAAO;gBACb,OAAO,EAAE,UAAU,IAAI,WAAW;gBAClC,YAAY,EAAE,CAAC;aAChB,CAAC,CAAC;SACJ;QACD,IAAI,OAAO,EAAE;YACX,QAAM,CAAC,IAAI,CAAC;gBACV,IAAI,EAAE,OAAO;aACd,CAAC,CAAC;SACJ;QACD,IAAI,QAAM,CAAC,MAAM,EAAE;YACjB,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,UAAC,CAAW;gBACjC,CAAC,CAAC,MAAM,CAAC,QAAM,CAAC,CAAC;YACnB,CAAC,CAAC,CAAC;SACJ;KACF;IAED,IAAI,QAAQ,CAAC,cAAc,CAAC,EAAE;QAC5B,aAAa,CACX,UAAU,CAAC,EAAE,EAAE,MAAM,EAAE;YACrB,OAAO,iCACF,IAAI,CAAC,OAAO,EAAE,SAAS,CAAC,GACxB,cAAc,KACjB,UAAU,EAAE,cAAc,CAAC,gBAAgB,EAC3C,QAAQ,wBACH,IAAI,CAAC,cAAc,EAAE,CAAC,OAAO,CAAC,CAAC,KAClC,KAAK,EAAE,cAAc,CAAC,WAAW,MAEpC;SACF,CAAC,CACH,CAAC;KACH;IAED,OAAO,MAAM,CAAC;AAChB,CAAC","sourcesContent":["import { each } from '@antv/util';\nimport { Geometry } from '@antv/g2';\nimport { Params } from '../../../core/adaptor';\nimport { point, line } from '../../../adaptor/geometries';\nimport { pick, deepAssign } from '../../../utils';\nimport { adaptor as columnAdaptor } from '../../column/adaptor';\nimport { GeometryOption } from '../types';\nimport { isLine, isColumn } from './option';\n\n/**\n * 绘制单个图形\n * @param params\n */\nexport function drawSingleGeometry<O extends { xField: string; yField: string; geometryOption: GeometryOption }>(\n  params: Params<O>\n): Params<O> {\n  const { options, chart } = params;\n  const { geometryOption } = options;\n  const { isStack, color, seriesField, groupField, isGroup } = geometryOption;\n\n  const FIELD_KEY = ['xField', 'yField'];\n  if (isLine(geometryOption)) {\n    // 绘制线\n    line(\n      deepAssign({}, params, {\n        options: {\n          ...pick(options, FIELD_KEY),\n          ...geometryOption,\n          line: {\n            color: geometryOption.color,\n            style: geometryOption.lineStyle,\n          },\n        },\n      })\n    );\n    // 绘制点\n    point(\n      deepAssign({}, params, {\n        options: {\n          ...pick(options, FIELD_KEY),\n          ...geometryOption,\n          point: geometryOption.point && {\n            color,\n            shape: 'circle',\n            ...geometryOption.point,\n          },\n        },\n      })\n    );\n    // adjust\n    const adjust = [];\n    if (isGroup) {\n      adjust.push({\n        type: 'dodge',\n        dodgeBy: groupField || seriesField,\n        customOffset: 0,\n      });\n    }\n    if (isStack) {\n      adjust.push({\n        type: 'stack',\n      });\n    }\n    if (adjust.length) {\n      each(chart.geometries, (g: Geometry) => {\n        g.adjust(adjust);\n      });\n    }\n  }\n\n  if (isColumn(geometryOption)) {\n    columnAdaptor(\n      deepAssign({}, params, {\n        options: {\n          ...pick(options, FIELD_KEY),\n          ...geometryOption,\n          widthRatio: geometryOption.columnWidthRatio,\n          interval: {\n            ...pick(geometryOption, ['color']),\n            style: geometryOption.columnStyle,\n          },\n        },\n      })\n    );\n  }\n\n  return params;\n}\n"]}